package gov.cms.dpc.queue.models;

import gov.cms.dpc.common.converters.StringListConverter;
import gov.cms.dpc.queue.JobStatus;
import gov.cms.dpc.queue.exceptions.JobQueueFailure;
import org.hl7.fhir.dstu3.model.ResourceType;

import javax.persistence.*;
import java.io.Serializable;
import java.security.interfaces.RSAPublicKey;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * The JobQueueBatch tracks the work done on a bulk export request. It contains the essential details of the request and
 * the results of the requests. The job is mutated between QUEUED to RUNNING to COMPLETE or FAILED states.
 *
 * For additional information on the design: https://confluenceent.cms.gov/display/DAPC/Queue+v2+Notes
 */
@Entity(name = "job_queue_batch")
public class JobQueueBatch implements Serializable {

    private static final long serialVersionUID = -578824686165779398L;

    /**
     * The list of resource type supported by DCP
     */
    public static final List<ResourceType> validResourceTypes = List.of(
            ResourceType.Patient,
            ResourceType.ExplanationOfBenefit,
            ResourceType.Coverage
    );

    /**
     * Test if the resource type is in the list of resources supported by the DCP
     *
     * @param type - {@code true} resource is supported by DPC. {@code false} resource is not supported by DPC.
     * @return True iff the passed in type is valid f
     */
    public static Boolean isValidResourceType(ResourceType type) {
        return validResourceTypes.contains(type);
    }

    /**
     * The unique job identifier
     */
    @Id
    @Column(name = "job_id")
    private UUID jobID;

    /**
     * The unique batch identifier
     */
    @Id
    @Column(name = "batch_id")
    private UUID batchID;

    /**
     * The unique organization identifier
     */
    @Column(name = "organization_id")
    private UUID orgID;

    /**
     * The current status of this job
     */
    protected JobStatus status;

    /**
     * The priority of job (generated by static algorithm)
     */
    private Integer priority;

    /**
     * The list of patient-ids for the specified provider from the attribution server
     */
    @Convert(converter = StringListConverter.class)
    @Column(name = "patients", columnDefinition = "text")
    private List<String> patients;

    /**
     * The last processed patient index. Null indicates no patients have been processed yet.
     */
    @Column(name = "patient_index")
    private Integer patientIndex;

    /**
     * The current aggregator processing the batch. Null indicates no aggregator is processing the batch.
     */
    @Column(name = "aggregator_id")
    protected UUID aggregatorID;

    /**
     * The public key used to encrypt the files
     */
    @Column(name = "rsa_public_key")
    private byte[] rsaPublicKey;

    /**
     * The time the job was last processed
     */
    @Column(name = "update_time", nullable = true)
    protected OffsetDateTime updateTime;

    /**
     * The time the job was submitted
     */
    @Column(name = "submit_time", nullable = true)
    protected OffsetDateTime submitTime;

    /**
     * The time the job started to work
     */
    @Column(name = "start_time", nullable = true)
    protected OffsetDateTime startTime;

    /**
     * The time the job was completed
     */
    @Column(name = "complete_time", nullable = true)
    protected OffsetDateTime completeTime;

    public JobQueueBatch() {
    }

    public JobQueueBatch(UUID jobID, UUID batchID, UUID orgID, List<String> patients) {
        this.jobID = jobID;
        this.batchID = batchID;
        this.orgID = orgID;
        this.patients = patients;
        this.status = JobStatus.QUEUED;
        this.submitTime = OffsetDateTime.now(ZoneOffset.UTC);
    }

    public JobQueueBatch(UUID jobID, UUID batchID, UUID orgID, List<String> patients, RSAPublicKey pubKey) {
        this.jobID = jobID;
        this.batchID = batchID;
        this.orgID = orgID;
        this.patients = patients;
        this.status = JobStatus.QUEUED;
        this.rsaPublicKey = pubKey.getEncoded();
        this.submitTime = OffsetDateTime.now(ZoneOffset.UTC);
    }

    /**
     * Is the job model fields consistent. Useful before and after serialization.
     *
     * @return True if the fields are consistent with each other
     */
    public Boolean isValid() {
        switch (status) {
            case QUEUED:
                return submitTime != null && aggregatorID == null;
            case RUNNING:
                return submitTime != null && startTime != null && updateTime != null && aggregatorID != null;
            case COMPLETED:
            case FAILED:
                return submitTime != null && startTime != null && updateTime != null && completeTime != null && aggregatorID == null;
            default:
                return false;
        }
    }

    public UUID getJobID() {
        return jobID;
    }

    public UUID getBatchID() {
        return batchID;
    }

    public UUID getOrgID() {
        return orgID;
    }

    public JobStatus getStatus() {
        return status;
    }

    public Integer getPriority() {
        return priority;
    }

    public List<String> getPatients() {
        return patients;
    }

    public Integer getPatientIndex() {
        return patientIndex;
    }

    public Optional<UUID> getAggregatorID() {
        return Optional.ofNullable(aggregatorID);
    }

    public byte[] getRsaPublicKey() {
        if (rsaPublicKey == null) {
            throw new NullPointerException("This Job was created without a public key!");
        } else {
            return rsaPublicKey;
        }
    }

    public Optional<OffsetDateTime> getUpdateTime() {
        return Optional.ofNullable(updateTime);
    }

    public Optional<OffsetDateTime> getSubmitTime() {
        return Optional.ofNullable(submitTime);
    }

    public Optional<OffsetDateTime> getStartTime() {
        return Optional.ofNullable(startTime);
    }

    public Optional<OffsetDateTime> getCompleteTime() {
        return Optional.ofNullable(completeTime);
    }

    /**
     * Transition this job to running status. This job should be in the QUEUED state.
     */
    public void setRunningStatus(UUID aggregatorID) {
        if (this.status != JobStatus.QUEUED) {
            throw new JobQueueFailure(jobID, batchID, String.format("Cannot run job. JobStatus: %s", this.status));
        }
        this.verifyAggregatorID(aggregatorID);
        status = JobStatus.RUNNING;
        this.aggregatorID = aggregatorID;
        startTime = OffsetDateTime.now(ZoneOffset.UTC);
    }

    /**
     * Transition this job to a COMPLETED or FAILED status.
     * This job should be in the RUNNING state.
     *
     * @param status - the new status
     */
    public void setFinishedStatus(UUID aggregatorID, JobStatus status) {
        assert(status == JobStatus.COMPLETED || status == JobStatus.FAILED);
        if (this.status != JobStatus.RUNNING) {
            throw new JobQueueFailure(jobID, batchID, String.format("Cannot complete. JobStatus: %s", this.status));
        }
        this.verifyAggregatorID(aggregatorID);
        this.status = status;
        this.aggregatorID = null;
        completeTime = OffsetDateTime.now(ZoneOffset.UTC);
    }

    protected void verifyAggregatorID(UUID aggregatorID) throws JobQueueFailure {
        if ( this.aggregatorID != null && !this.aggregatorID.equals(aggregatorID) ) {
            throw new JobQueueFailure(jobID, batchID, String.format("Cannot update job. Cannot process a job owned by another aggregator. Existing Aggregator: %s Aggregator Claiming: %s", jobID, batchID, this.aggregatorID, aggregatorID));
        }
    }

    /**
     * Keep the update time in sync whenever a change occurs after the start time
     */
    @PreUpdate
    public void setUpdateTime() {
        if ( startTime != null ) {
            updateTime = OffsetDateTime.now(ZoneOffset.UTC);
        }
    }
}
