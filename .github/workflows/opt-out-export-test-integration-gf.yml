name: Opt-Out-Export Integration Tests (Greenfield)

on:
  pull_request:
    paths:
      - .github/workflows/opt-out-export-test-integration.yml
      - .github/workflows/opt-out-export-deploy.yml
      - .github/workflows/deploy_go_lambda.yml
      - lambda/opt-out-export/**
  workflow_dispatch:
    inputs:
      env:
        description: AWS environment to deploy to
        required: true
        type: 'string'
        default: 'dev'
  workflow_call:
    inputs:
      env:
        description: AWS environment to deploy to
        required: true
        type: 'string'
        default: 'dev'

# Ensure we have only one integration test running at a time
concurrency:
  group: opt-out-export-test-integration

jobs:
  # Deploy first if triggered by pull_request
  deploy:
    if: ${{ github.event_name == 'pull_request' }}
    uses: ./.github/workflows/opt-out-export-deploy-gf.yml
    with:
      env: dev
    secrets: inherit

  trigger:
    if: ${{ always() }}
    needs: deploy
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
    defaults:
      run:
        working-directory: ./lambda/opt-out-export
    outputs:
      start_time: ${{ steps.invoke-lambda.outputs.STARTTIME }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            lambda/opt-out-export
      - name: Configure non-prod AWS Credentials
        if: ${{ github.event_name == 'pull_request' || inputs.env == 'dev' || inputs.env == 'test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-dev-github-actions
      - name: Configure prod AWS Credentials
        if: ${{ inputs.env == 'sandbox' || inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-prod-github-actions
      - name: Send event to trigger export lambda function
        id: invoke-lambda
        run: |
          echo "STARTTIME=`date +%s`" >> "$GITHUB_OUTPUT"
          aws lambda invoke --function-name dpc-dev-opt-out-export test-result.txt

  verify-bucket:
    if: ${{ always() && needs.trigger.result == 'success' }}
    needs: trigger
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - name: Configure GHA non-prod AWS Credentials
        if: ${{ github.event_name == 'pull_request' ||  inputs.env == 'dev' || inputs.env == 'test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-dev-github-actions
      - name: Configure GHA prod AWS Credentials
        if: ${{ inputs.env == 'sandbox' || inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-prod-github-actions
      - name: echo role arn
        run: |
          echo "/opt-out-import/dpc/${{ inputs.env || 'dev' }}/bfd-bucket-role-arn"

      - name: retrieve bfd bucket role
        uses: cmsgov/ab2d-bcda-dpc-platform/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            BFD_BUCKET_ROLE=/opt-out-import/dpc/${{ inputs.env || 'dev' }}/bfd-bucket-role-arn

      - name: Configure import lambda non-prod AWS Credentials
        if: ${{ github.event_name == 'pull_request' || inputs.env == 'dev' || inputs.env == 'test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-dev-opt-out-import-function
      - name: Configure import lambda non-prod AWS Credentials
        if: ${{ inputs.env == 'sandbox' || inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-prod-opt-out-import-function

      - name: Configure BFD bucket credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ env.BFD_BUCKET_ROLE }}
          role-chaining: true
          role-skip-session-tagging: true
      - name: Verify confirmation file put in bucket
        env:
          STARTTIME: ${{needs.trigger.outputs.start_time}}
        run: |
          while read line; do
            filedate_s=`echo $line | awk '{print $1 " " $2}'`
            filedate=`date -d "$filedate_s" +%s`
            if [[ $((filedate > STARTTIME)) == 1 ]]; then
              echo "we have a winner!"
              exit 0
            fi
          done < <(aws s3 ls s3://bfd-test-eft/bfdeft01/dpc/out/ | grep REQ)
          echo "no new file found"
          exit 1
