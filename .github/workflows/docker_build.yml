name: Docker Build

on:
  push:

permissions:
  id-token: write
  contents: read

env:
  VAULT_PW: ${{ secrets.VAULT_PW }}
  REPORT_COVERAGE: true
  DPC_CA_CERT: ${{ secrets.DPC_CA_CERT }}
  ENV: "github-ci"

jobs:
  docker_build_portals:
    runs-on: self-hosted
    steps:
      - name: Install python3
        run: sudo dnf install python3

      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Install docker compose manually
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chown root:root /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

      - name: Assert Ownership
        run: sudo chmod -R 777 .
      - name: Cleanup Runner
        run: ./scripts/cleanup-docker.sh

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-dev-github-actions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Set up JDK 11"
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: temurin
          cache: maven

      - name: Install Maven 3.6.3
        run: |
          export PATH="$PATH:/opt/maven/bin"
          echo "PATH=$PATH" >> $GITHUB_ENV
          if mvn -v; then echo "Maven already installed" && exit 0; else echo "Installing Maven"; fi
          tmpdir="$(mktemp -d)"
          curl -LsS https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | tar xzf - -C "$tmpdir"
          sudo rm -rf /opt/maven
          sudo mv "$tmpdir/apache-maven-3.6.3" /opt/maven

      - name: Clean maven
        run: mvn -ntp -U clean

      - name: "Set up Ansible"
        run: |
          sudo dnf -y install python3 python3-pip
          pip install ansible

#      - name: Build app
#        run: |
#          export PATH=$PATH:~/.local/bin
#          make ci-app
#
#      - name: Build portal
#        run: |
#          make ci-portal

      - name: Build portals
        run: |
          make ci-portals-v1

      - name: Push Rails Web Portal to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: web-portal
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: Push Rails Admin Portal to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: web-admin
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: Push Web to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: web
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: echo hello
        run: echo "pushed portal images"

  docker_build_java:
    runs-on: self-hosted
    steps:
      - name: Install python3
        run: sudo dnf install python3

      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Install docker compose manually
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chown root:root /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

      - name: Assert Ownership
        run: sudo chmod -R 777 .
      - name: Cleanup Runner
        run: ./scripts/cleanup-docker.sh

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-dev-github-actions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Set up JDK 11"
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: temurin
          cache: maven

      - name: Install Maven 3.6.3
        run: |
          export PATH="$PATH:/opt/maven/bin"
          echo "PATH=$PATH" >> $GITHUB_ENV
          if mvn -v; then echo "Maven already installed" && exit 0; else echo "Installing Maven"; fi
          tmpdir="$(mktemp -d)"
          curl -LsS https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | tar xzf - -C "$tmpdir"
          sudo rm -rf /opt/maven
          sudo mv "$tmpdir/apache-maven-3.6.3" /opt/maven

      - name: Clean maven
        run: mvn -ntp -U clean

      - name: "Set up Ansible"
        run: |
          sudo dnf -y install python3 python3-pip
          pip install ansible

      - name: Build ci app
        run: |
          export PATH=$PATH:~/.local/bin
          make ci-app

      - name: Push Rails Web Portal to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: api
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: Push Rails Admin Portal to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: attribution
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: Push Web to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: aggregation
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: Push Web to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: consent
          IMAGE_TAG: hardcodedstringfornow
        run: |
          docker tag dpc-$REPOSITORY:latest $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/dpc-$REPOSITORY:$IMAGE_TAG

      - name: echo hello
        run: echo "pushed java images"
