name: utility-deploy-go-lambda (Greenfield)

on:
  workflow_call:
    inputs:
      env:
        description: AWS environment to deploy to
        required: true
        type: string
      project:
        description: Project name
        required: true
        type: string
      go_files:
        description: space-delimited go files
        required: true
        type: string
      s3_lookup_key:
        description: Key for parameter store to obtain corresponding s3 bucket name
        required: true
        type: string

jobs:
  deploy:
    name: "Build and Deploy"
#    if: ${{ inputs.env != 'prod' }}
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
    defaults:
      run:
        working-directory: ./lambda/${{ inputs.project }}
    environment: ${{ inputs.env }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
      - name: Build ${{ inputs.project }} zip file
        env:
          CGO_ENABLED: 0
        run: |
          go build -o bootstrap ${{ inputs.go_files }}
          zip function.zip bootstrap
      - name: AWS Credentials (non-prod)
        if: ${{ inputs.env == 'dev' || inputs.env == 'test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: AWS Credentials (prod)
        if: ${{ inputs.env == 'prod-sbx' || inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions

      - name: retrieve s3 bucket
        id: retrieve_s3_bucket
        run: |
          LAMBDA_BUCKET_NAME=$(aws ssm get-parameter --name "${{ inputs.s3_lookup_key }}" --with-decryption --query "Parameter.Value" --output text)
          echo "lambda_bucket_name=$LAMBDA_BUCKET_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload and reload
        env:
          LABEL: ${{ inputs.env }}-${{ inputs.project }}
        run: |
          aws s3 cp --no-progress function.zip \
            s3://${{ steps.retrieve_s3_bucket.outputs.lambda_bucket_name }}/function.zip --sse=aws:kms
          aws lambda update-function-code --function-name dpc-$LABEL \
            --s3-bucket dpc-$LABEL-function --s3-key function-${{ github.sha }}.zip

#  promote:
#    name: "Promote to prod"
#    if: ${{ inputs.env == 'prod' }}
#    permissions:
#      contents: read
#      id-token: write
#    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
#    environment: prod
#    steps:
#      - uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ${{ vars.AWS_REGION }}
#          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-prod-github-actions
#      - name: Promote lambda code from test to prod
#        run: |
#          aws s3 cp --no-progress \
#            s3://dpc-test-${{ inputs.project }}-function/function-${{ github.sha }}.zip \
#            s3://dpc-prod-${{ inputs.project }}-function/function-${{ github.sha }}.zip
#          aws lambda update-function-code --function-name dpc-prod-${{ inputs.project }} \
#            --s3-bucket dpc-prod-${{ inputs.project }}-function --s3-key function-${{ github.sha }}.zip
