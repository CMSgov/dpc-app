name: 'DPC - Promote Build'

on:
  push:
    paths:
      - .github/workflows/promote-build.yml
  workflow_dispatch:
      from_env:
        description: AWS environment to promote FROM
        required: true
        type: 'string'
        default: 'dev'
      to_env:
        description: AWS environment to promote TO
        required: true
        type: 'string'
        default: 'dev'
      confirm_env:
        description: Double check environment to promote TO
        required: true
        type: 'string'
        default: ''
    
concurrency:
  group: ${{ github.workflow }}-${{ inputs.to_env }}
  cancel-in-progress: false

jobs:
  set-parameters:
    name: "Set Parameters"
    runs-on: self-hosted
    outputs:
      version: ${{ steps.fetch-info.outputs.version }}
      image: ${{ steps.fetch-info.outputs.image }}
    steps:
      - name: "Validate Environment"
        if: ${{ inputs.to_env != inputs.confirm_env }}
        run: |
          echo "Target deployment environment \"${{ inputs.to_env }}\" must be specified and match confirmed deployment environment \"${{ inputs.confirm_env }}\"."
          exit 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-dev-github-actions
      - name: "Fetch Image and App Version from AWS"
        id: fetch-info
        run: |
          SERVICE_INFO=$(aws ecs describe-services --services dpc-${{ inputs.from_env || 'dev' }}-api-v9 --cluster dpc-${{ inputs.from_env || 'dev' }}-frontend --query "services[0].deployments[0]")
          TASK_DEFINITION=`echo $SERVICE_INFO | jq -r '.taskDefinition | split(":")[-1]'`
          TASK_INFO=`aws ecs describe-task-definition --task-definition arn:aws:ecs:us-east-1:755619740999:task-definition/dpc-prod-api:189 --query "taskDefinition.containerDefinitions[0].{Image: image, Version: environment[?name=='APP_VERSION'].value | [0]}"`
          echo $TASK_INFO
