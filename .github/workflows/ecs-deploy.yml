name: 'DPC - ECS Deploy'

on:
  workflow_call:
    inputs:
      env:
        description: AWS environment to check
        required: true
        type: 'string'
        default: 'dev'
      confirm_env:
        description: Double check for environment
        required: true
        type: 'string'
        default: ''
      tag:
        description: Image tag to deploy
        required: false
        type: 'string'
        default: 'latest'
      terraform:
        description: 'Also run terraform?'
        type: boolean
        default: false
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    if: ${{ false }}
    name: Deploy
    runs-on: self-hosted
    container:
      image: alpine:latest
      options: --user root
    outputs:
      rel_tag: ${{ steps.rel-tag.outputs.rel_tag }}
    steps:
      - name: Run and Fail if Inputs Invalid
        if: ${{ inputs.env != inputs.confirm_env }}
        run: |
          echo 'Target deployment environment "${{ inputs.env }}" must be specified and match confirmed deployment environment "${{ inputs.confirm_env }}".'
          exit 1
      - name: Install Dependencies
        run: |
          apk update
          apk add git --no-cache
          apk add openssh --no-cache
          apk add npm --no-cache
          apk add aws-cli --no-cache
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: Set Release Image Tag
        id: rel-tag
        env:
          EXPLICIT_TAG: ${{ inputs.tag }}
        run: |
          if [ -z $EXPLICIT_TAG ] || [ $EXPLICIT_TAG = 'latest' ]; then
            rel_tag=`aws --region us-east-1 ecr describe-images --repository-name dpc-api --image-ids 'imageTag=latest' '--query=imageDetails[].imageTags[] | [?contains(@, \`rls-\`)] | [0]' --output text`
            echo "rel_tag=$rel_tag" >> "$GITHUB_OUTPUT"
          else
          # Note: this will fail if the image doesn't exist
            aws --region us-east-1 ecr describe-images --repository-name dpc-api --image-ids 'imageTag=${{ inputs.tag }}' > /dev/null
            echo "rel_tag=$EXPLICIT_TAG" >> "$GITHUB_OUTPUT"
          fi
          echo $rel_tag
      - name: Check for maintenance mode
        id: maintenance-mode
        run: |
          maintenance=`aws ecs list-tags-for-resource --resource-arn arn:aws:ecs:us-east-1:755619740999:cluster/dpc-${{ inputs.env }}-backend '--query=tags[?key==\`Maintenance\`].value' --output text`
          echo "maintenance=$maintenance" >> "$GITHUB_OUTPUT"
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          repository: 'CMSgov/dpc-ops'
          ref: 'main'
          ssh-key: ${{ secrets.DPC_OPS_SSH_KEY }}
          path: dpc-ops
      - name: install terraform
        if: ${{ inputs.terraform }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.0.0"
      - name: Verify persistent plan
        if: ${{ inputs.terraform }}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}/persistent
          terraform init
          terraform plan -out dpc-release-${{ inputs.env }}.tfplan -lock=false 2>&1
      - name: Apply persistent plan
        if: ${{ inputs.terraform && false }}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}/persistent
          terraform apply dpc-release-${{ inputs.env }}.tfplan
      - name: Verify main environment plan
        if: ${{ inputs.terraform }}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}
          terraform init
          terraform plan -var 'maintenance_mode=${{ steps.maintenance-mode.outputs.maintenance }} -var 'release_version=commit_f413bc3a' -var 'aggregation_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -var 'api_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -var 'attribution_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -var 'consent_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -var 'web_admin_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -var 'web_portal_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -var 'web_image_tag=${{ steps.rel-tag.outputs.rel_tag }}' -out dpc-release-${{ inputs.env }}.tfplan
      - name: Apply main environment plan
        if: ${{ inputs.terraform && false}}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}
          terraform apply dpc-release-${{ inputs.env }}.tfplan
  services-up:
    name: All Services Healthy
    if: ${{ false }}
    uses: CMSgov/dpc-app/.github/workflows/check_healthy.yml@jd/dpc-4454-ecs-deploy
    with:
      env: ${{ inputs.env }}
    secrets: inherit
  notify-new-relic:
    name: Notify New Relic
    runs-on: self-hosted
    steps:
      - name: 'Notify New Relic'
        run: |
          for service in dpc-api-${{ inputs.env }} dpc-attribution-${{ inputs.env }} dpc-aggregation-${{ inputs.env }} dpc-consent-${{ inputs.env }} dpc-web-${{ inputs.env }} dpc-web-admin-${{ inputs.env }} dpc-web-portal-${{ inputs.env }} bad
          do
            application_id=`docker run --rm -e NEW_RELIC_API_KEY="${{ secrets.NEW_RELIC_API_KEY }}" -e NEW_RELIC_REGION="US" newrelic/cli:v0.18 apm application search --name $service || '{}' | jq -r ".[] | select(.name == \"$service\") | .applicationId"`
            if [ ! -z "$application_id" ] && [ ! $application_id = 'null' ]; then
             echo "Notify new relic about $service $application_id"
             else
             echo "No such service: $service"
            fi
          done
  notify-slack:
    name: Notify Slack
    if: ${{ false }}
    runs-on: self-hosted
    steps:
      - name: 'Notify Slack'
        run: |
          echo 'TBD'
