name: 'DPC - ECS Deploy'

# TODO: remove if: ${{ false }}, remove FAKE from Slack messages; remove inputs.terraform, temp-deploy, remove lock=false

on:
  workflow_call:
    inputs:
      env:
        description: AWS environment to check
        required: true
        type: 'string'
        default: 'dev'
      confirm_env:
        description: Double check for environment
        required: true
        type: 'string'
        default: ''
      tag:
        description: Image tag to deploy
        required: false
        type: 'string'
        default: 'latest'
      terraform: # temp
        description: 'Also run terraform?'
        type: boolean
        default: false
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: self-hosted
    outputs:
      image_tag: ${{ steps.image-tag.outputs.image_tag }}
    steps:
      - name: Run and Fail if Inputs Invalid
        if: ${{ inputs.env != inputs.confirm_env }}
        run: |
          echo "Target deployment environment \"${{ inputs.env }}\" must be specified and match confirmed deployment environment \"${{ inputs.confirm_env }}\"."
          exit 1
      - name: Install Dependencies
        run: |
          apk update
          apk add git --no-cache
          apk add openssh --no-cache
          apk add npm --no-cache
          apk add aws-cli --no-cache
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: Set Deployed Image Tag
        id: image-tag
        env:
          EXPLICIT_TAG: ${{ inputs.tag }}
        run: |
          if [ -z $EXPLICIT_TAG ] || [ $EXPLICIT_TAG = 'latest' ]; then
            image_tag=`aws --region us-east-1 ecr describe-images --repository-name dpc-api --image-ids 'imageTag=latest' '--query=imageDetails[].imageTags[] | [?contains(@, \`rls-\`)] | [0]' --output text`
            echo "image_tag=$image_tag" >> "$GITHUB_OUTPUT"
          else
          # Note: this will fail if the image doesn't exist
            aws --region us-east-1 ecr describe-images --repository-name dpc-api --image-ids 'imageTag=${{ inputs.tag }}' > /dev/null
            echo "image_tag=$EXPLICIT_TAG" >> "$GITHUB_OUTPUT"
          fi
          echo $image_tag
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack Starting
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "FAKE Deployment to `${{ inputs.env }}` has started"
            attachments:
              - color: warning
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ steps.image-tag.outputs.image_tag }}
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          repository: 'CMSgov/dpc-ops'
          ref: 'main'
          ssh-key: ${{ secrets.DPC_OPS_SSH_KEY }}
          path: dpc-ops
      - name: install terraform
        if: ${{ inputs.terraform }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.0.0"
      - name: Verify persistent plan
        if: ${{ inputs.terraform }}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}/persistent
          terraform init
          terraform plan -out dpc-release-${{ inputs.env }}.tfplan -lock=false 2>&1
      - name: Apply persistent plan
        if: ${{ inputs.terraform && false }}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}/persistent
          terraform apply dpc-release-${{ inputs.env }}.tfplan
      - name: Verify main environment plan
        if: ${{ inputs.terraform }}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}
          terraform init
          terraform plan -var 'release_version=commit_f413bc3a' -var 'aggregation_image_tag=${{ steps.image-tag.outputs.image_tag }}' -var 'api_image_tag=${{ steps.image-tag.outputs.image_tag }}' -var 'attribution_image_tag=${{ steps.image-tag.outputs.image_tag }}' -var 'consent_image_tag=${{ steps.image-tag.outputs.image_tag }}' -var 'web_admin_image_tag=${{ steps.image-tag.outputs.image_tag }}' -var 'web_portal_image_tag=${{ steps.image-tag.outputs.image_tag }}' -var 'web_image_tag=${{ steps.image-tag.outputs.image_tag }}' -out dpc-release-${{ inputs.env }}.tfplan
      - name: Apply main environment plan
        if: ${{ inputs.terraform && false}}
        run: |
          cd dpc-ops/terraform/${{ inputs.env }}
          terraform apply dpc-release-${{ inputs.env }}.tfplan

  services-up:
    name: All Services Healthy
    if: ${{ false }}
    needs: deploy
    uses: CMSgov/dpc-app/.github/workflows/check_healthy.yml@jd/dpc-4454-ecs-deploy
    with:
      env: ${{ inputs.env }}
    secrets: inherit

  notify-new-relic:
    name: Notify New Relic
    if: ${{ false }}
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: 'Notify New Relic'
        id: notify-new-relic
        run: |
          counter=0
          for service in dpc-api-${{ inputs.env }} dpc-attribution-${{ inputs.env }} dpc-aggregation-${{ inputs.env }} dpc-consent-${{ inputs.env }} dpc-web-${{ inputs.env }} dpc-web-admin-${{ inputs.env }} dpc-web-portal-${{ inputs.env }}
          do
            application_stanza=`docker run --rm -e NEW_RELIC_API_KEY="${{ secrets.NEW_RELIC_API_KEY }}" -e NEW_RELIC_REGION="US" newrelic/cli:v0.18 apm application search --name $service`
            if [ -z "$application_stanza" ] || [ "$application_stanza" = "null" ]; then
              echo "Service $service not found in New Relic, skipping gracefully."
            else
              echo "Notifying New Relic about deployment of $service to ${{ inputs.env }}"
              application_id=`echo $application_stanza | jq -r ".[] | select(.name == \"$service\") | .applicationId"`
              docker run --rm -e NEW_RELIC_API_KEY="${{ secrets.NEW_RELIC_API_KEY }}" -e NEW_RELIC_REGION="US" newrelic/cli:v0.18 apm deployment create --applicationId "$application_id" --revision "${{ needs.deploy.outputs.image_tag }}" --user jenkins
              counter=$((counter+1))
            fi
          done
          echo "counter=$counter" >> "$GITHUB_OUTPUT"
      - name: Slack if nothing to New Relic
        if: ${{ steps.notify-new-relic.outputs.counter == 0 }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-alerts
          payload: |
            channel: "CUY7H43DY"
            text:  "FAKE Notification to New Relic of deployment to `${{ inputs.env }}` has failed"
            attachments:
              - color: danger
                text: Although the deployment succeeded, we were unable to notify New Relic
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer

  notify-slack:
    name: Notify Slack
    if: ${{ always() && false }}
    needs:
      - deploy
      - services-up
    runs-on: self-hosted
    steps:
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack Success
        if: ${{ needs.services-up.result == 'success' }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "FAKE Deployment to `${{ inputs.env }}` has succeeded"
            attachments:
              - color: good
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ needs.deploy.outputs.image_tag }}
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack failure
        if: ${{ contains(needs.*.result, 'failure') }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "FAKE Deployment to `${{ inputs.env }}` has failed"
            attachments:
              - color: danger
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ needs.deploy.outputs.image_tag }}
