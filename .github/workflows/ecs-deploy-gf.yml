name: 'DPC - ECS Deploy (Greenfield)'

on:
  workflow_dispatch:
    inputs:
      env:
        description: AWS environment to deploy to
        required: true
        type: 'string'
        default: 'dev'
      confirm_env:
        description: Double check for environment
        required: true
        type: 'string'
        default: ''
      ecr_image_tag:
        description: Image tag to deploy
        required: false
        type: 'string'
        default: 'latest'
      app-version:
        description: 'The version of dpc-app being deployed (ex: r###, xx_test_branch).  This will appear in logs under the "version" property".'
        required: false
        type: 'string'
        default: 'unknown'
      ops-ref:
        description: Branch of dpc-ops to use
        required: false
        type: 'string'
        default: 'main'
  workflow_call:
    inputs:
      env:
        description: AWS environment to deploy to
        required: true
        type: 'string'
        default: 'dev'
      confirm_env:
        description: Double check for environment
        required: true
        type: 'string'
        default: ''
      ecr_image_tag:
        description: Image tag to deploy
        required: false
        type: 'string'
        default: 'latest'
      app-version:
        description: 'The version of dpc-app being deployed (ex: r###, xx_test_branch).  This will appear in logs under the "version" property".'
        required: false
        type: 'string'
        default: 'unknown'
      ops-ref:
        description: Branch of dpc-ops to use
        required: false
        type: 'string'
        default: 'main'

concurrency:
  group: deploy-to-${{ inputs.env }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
    container:
      image: alpine:latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.image_tag }}
    steps:
      - name: Run and Fail if Inputs Invalid
        if: ${{ inputs.env != inputs.confirm_env }}
        run: |
          echo "Target deployment environment \"${{ inputs.env }}\" must be specified and match confirmed deployment environment \"${{ inputs.confirm_env }}\"."
          exit 1
      - name: Install Dependencies
        run: |
          apk update
          apk add git --no-cache
          apk add openssh --no-cache
          apk add npm --no-cache
          apk add aws-cli --no-cache
          apk add curl --no-cache # for using setup-tfenv-terraform action
          apk add bash --no-cache

      - name: AWS Credentials (non-prod)
        if: ${{ inputs.env == 'dev' || inputs.env == 'test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: AWS Credentials (prod)
        if: ${{ inputs.env == 'sandbox' || inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: Set Deployed Image Tag
        id: image-tag
        env:
          EXPLICIT_TAG: ${{ inputs.ecr_image_tag }}
        run: |
          if [ -z $EXPLICIT_TAG ] || [ $EXPLICIT_TAG = 'latest' ]; then
            image_tag=`aws --region us-east-1 ecr describe-images --repository-name dpc-api --image-ids 'imageTag=latest' '--query=imageDetails[].imageTags[] | [?contains(@, \`rls-\`)] | [0]' --output text`
            echo "image_tag=$image_tag" >> "$GITHUB_OUTPUT"
          else
          # Note: this will fail if the image doesn't exist
            aws --region us-east-1 ecr describe-images --repository-name dpc-api --image-ids 'imageTag=${{ inputs.ecr_image_tag }}' > /dev/null
            echo "image_tag=$EXPLICIT_TAG" >> "$GITHUB_OUTPUT"
          fi
          echo $image_tag
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack Starting
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "GHA Deployment to `${{ inputs.env }}` has started"
            attachments:
              - color: warning
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ steps.image-tag.outputs.image_tag }}
      - name: "Checkout code"
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871
        with:
          repository: 'CMSgov/dpc-ops'
          ref: ${{ inputs.ops-ref }}
          ssh-key: ${{ secrets.DPC_OPS_SSH_KEY }}
          path: dpc-ops
      - name: Terraform install
        uses: cmsgov/ab2d-bcda-dpc-platform/actions/setup-tfenv-terraform@main
        with:
          directory: .
      - name: Verify persistent plan
        run: |
          cd dpc-ops/terraform/gf-${{ inputs.env }}/persistent
          terraform init
          terraform plan -out dpc-release-gf-${{ inputs.env }}.tfplan 2>&1
      - name: Apply persistent plan
        run: |
          cd dpc-ops/terraform/gf-${{ inputs.env }}/persistent
          terraform apply dpc-release-gf-${{ inputs.env }}.tfplan
      - name: Verify main environment plan
        run: |
          cd dpc-ops/terraform/gf-${{ inputs.env }}
          terraform init
          terraform plan -var 'release_version=${{ inputs.app-version}}' \
                         -var 'image_tag=${{ steps.image-tag.outputs.image_tag }}' \
                         -out dpc-release-gf-${{ inputs.env }}.tfplan
      - name: Apply main environment plan
        run: |
          cd dpc-ops/terraform/gf-${{ inputs.env }}
          terraform apply dpc-release-gf-${{ inputs.env }}.tfplan
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack failure
        if: ${{ failure() }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "GHA Deployment to `${{ inputs.env }}` has failed in Deploy Job"
            attachments:
              - color: danger
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ needs.deploy.outputs.image_tag }}

  services-up:
    name: All Services Healthy
    needs: deploy
    uses: ./.github/workflows/check_healthy_gf.yml
    with:
      env: ${{ inputs.env }}
    secrets: inherit

  notify-new-relic:
    name: Notify New Relic
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
    needs: deploy
    steps:
      - name: AWS Credentials (non-prod)
        if: ${{ inputs.env == 'dev' || inputs.env == 'test' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: AWS Credentials (prod)
        if: ${{ inputs.env == 'sandbox' || inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/dpc-${{ inputs.env }}-github-actions
      - name: Set env vars from AWS params
        uses: cmsgov/ab2d-bcda-dpc-platform/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            NEW_RELIC_API_KEY=/dpc/${{ inputs.env }}/newrelic/new_relic_user_key
      - name: 'Notify New Relic'
        id: notify-new-relic
        run: |
          counter=0
          for service in dpc-api-${{ inputs.env }} dpc-attribution-${{ inputs.env }} dpc-aggregation-${{ inputs.env }} dpc-consent-${{ inputs.env }} dpc-web-${{ inputs.env }} dpc-web-admin-${{ inputs.env }} dpc-web-portal-${{ inputs.env }}
          do
            application_stanza=`docker run --rm -e NEW_RELIC_API_KEY="$NEW_RELIC_API_KEY" -e NEW_RELIC_REGION="US" newrelic/cli:v0.18 apm application search --name $service`
            if [ -z "$application_stanza" ] || [ "$application_stanza" = "null" ]; then
              echo "Service $service not found in New Relic, skipping gracefully."
            else
              application_id=`echo $application_stanza | jq -r ".[] | select(.name == \"$service\") | .applicationId"`
              if [ -z "$application_id" ] || [ "$application_id" = "null" ]; then
                 echo "Service $service not found in New Relic, skipping gracefully."
              else
                echo "Notifying New Relic about deployment of $service to ${{ inputs.env }}"
                docker run --rm -e NEW_RELIC_API_KEY="$NEW_RELIC_API_KEY" -e NEW_RELIC_REGION="US" newrelic/cli:v0.18 apm deployment create --applicationId "$application_id" --revision "${{ needs.deploy.outputs.image_tag }}" --user jenkins
                counter=$((counter+1))
              fi
            fi
          done
          echo "counter=$counter" >> "$GITHUB_OUTPUT"
      - name: Slack if nothing to New Relic
        if: ${{ failure() || steps.notify-new-relic.outputs.counter == 0 }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-alerts
          payload: |
            channel: "CUY7H43DY"
            text:  "GHA Notification to New Relic of deployment to `${{ inputs.env }}` has failed"
            attachments:
              - color: danger
                text: Although the deployment succeeded, we were unable to notify New Relic
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer

  notify-slack:
    name: Notify Slack
    # Force this to run unless the workflow was canceled
    if: ${{ !cancelled() }}
    needs:
      - deploy
      - services-up
    permissions:
      contents: read
      id-token: write
    runs-on: codebuild-dpc-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack Success
        if: ${{ needs.services-up.result == 'success' }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "GHA Deployment to `${{ inputs.env }}` has succeeded"
            attachments:
              - color: good
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ needs.deploy.outputs.image_tag }}
      - uses: slackapi/slack-github-action@v2.0.0
        name: Slack failure
        if: ${{ needs.services-up.result != 'success' }}
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to dpc-deploys
          payload: |
            channel: "CMC1E4AEQ"
            text:  "GHA Deployment to `${{ inputs.env }}` has failed"
            attachments:
              - color: danger
                footer: "<${{ github.server_url}}/${{ github.repository}}/actions/runs/${{ github.run_id }}|ECS Deploy - Build ${{ github.run_id }}>"
                mrkdown_in:
                  - footer
                fields:
                  - title: Image Tag
                    value: ${{ needs.deploy.outputs.image_tag }}
