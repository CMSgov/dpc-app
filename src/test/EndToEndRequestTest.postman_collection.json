{
	"info": {
		"_postman_id": "46f1266f-6a54-4a33-9d31-3ea944875a35",
		"name": "EndToEndRequestTest",
		"description": "This test is an example of an end to end set of API requests to submit a roster and export patient data. Each element in the 'item' list is a single request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"id": "9367b8dc-66ce-4361-a042-0706adf9f40e",
			"key": "PROVIDER_ID",
			"value": "8D80925A-027E-43DD-8AED-9A501CC4CD91",
			"type": "string"
		},		{
			"id": "38ea34e9-36c3-4815-9b66-819260c9a9a6",
			"key": "hostname",
			"value": "localhost",
			"type": "string"
		},
		{
			"id": "8331a043-07cd-4c34-9964-89734d2bf476",
			"key": "api_port",
			"value": "3002",
			"type": "string"
		},
		{
			"id": "fc3be08d-1265-4a72-b4e9-335e75cc7b58",
			"key": "attribution_port",
			"value": "3500",
			"type": "string"
		}

	],
	"item": [
		{
			"name": "Export missing group",
			"request": {
				"description": "This first attempt to export data should fail with a 404 because the provider data is unavailable. The next request submits a roster to correct the problem. View the `exec` field of the `event` field to see the tests run.",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{PROVIDER_ID}}/$export",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "{{api_port}}",
					"path": [
						"v1",
						"Group",
						"{{PROVIDER_ID}}",
						"$export"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f936145-db10-4d73-95c6-1b8b94b5a387",
						"exec": [
							"// Status should be 404",
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"// Response body should include:",
							"// The resourceType \"OperationOutcome\"",
							"// A single issue, severity fatal",
							"pm.test(\"Response body has correct error information\", function() {",
							"    pm.expect(pm.response.json().resourceType).to.equal(\"OperationOutcome\");",
							"    pm.expect(pm.response.json().issue).to.have.lengthOf(1);",
							"    pm.expect(pm.response.json().issue[0].severity).to.equal(\"fatal\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		},
		{
			"name": "Submit roster",
			"request": {
				"description": "This request submits the roster for the provider. The roster data is in the `body` field of the request. It's easier to see in the Postman GUI.",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/fhir+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resourceType\": \"Bundle\",\n  \"id\": \"12345\",\n  \"type\": \"collection\",\n  \"entry\": [\n    {\n      \"fullUrl\": \"http://something.gov/8D80925A-027E-43DD-8AED-9A501CC4CD91\",\n      \"resource\": {\n        \"resourceType\": \"Practitioner\",\n        \"identifier\": [\n          {\n            \"value\": \"8D80925A-027E-43DD-8AED-9A501CC4CD91\"\n          }\n        ],\n        \"name\": [\n          {\n            \"family\": \"Provider\",\n            \"given\": [\n              \"Test\"\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"fullUrl\": \"http://something.gov/20000000001809\",\n      \"resource\": {\n        \"resourceType\": \"Patient\",\n        \"identifier\": [\n          {\n            \"value\": \"20000000001809\"\n          }\n        ],\n        \"name\": [\n          {\n            \"family\": \"Patient\",\n            \"given\": [\n              \"Tester -624899019\"\n            ]\n          }\n        ],\n        \"birthDate\": \"2019-03-01\"\n      }\n    },\n    {\n      \"fullUrl\": \"http://something.gov/20000000001810\",\n      \"resource\": {\n        \"resourceType\": \"Patient\",\n        \"identifier\": [\n          {\n            \"value\": \"20000000001810\"\n          }\n        ],\n        \"name\": [\n          {\n            \"family\": \"Patient\",\n            \"given\": [\n              \"Tester -1092912540\"\n            ]\n          }\n        ],\n        \"birthDate\": \"2019-03-01\"\n      }\n    }\n  ]\n}"
				},
				"url": {
					"raw": "http://{{hostname}}:{{attribution_port}}/v1/Group/",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "{{attribution_port}}",
					"path": [
						"v1",
						"Group",
						""
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72634c6f-4d6b-49b9-b4db-b172af0f04f1",
						"exec": [
							"// Status should be 200",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		},
		{
			"name": "Retry export after submitting roster",
			"request": {
				"description": "After submitting the roster, the export request should succeed, with a 204 status and the location for the job response in the `content-location` header.",
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{PROVIDER_ID}}/$export",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "{{api_port}}",
					"path": [
						"v1",
						"Group",
						"{{PROVIDER_ID}}",
						"$export"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5497fa12-aefd-44c2-9254-2beb51c52e31",
						"exec": [
							"// Status should be 204",
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Url for job response should be in content-location header.",
							"pm.test(\"Content-Location header is present\", function () {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"content_location\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		},
		{
			"name": "Job response",
			"request": {
				"description": "While the export request is being processed, the job url will return a 202 status. When it is completed, a 200 status will be returned, along with JSON containing the patient, explanation of benefits, and coverage data.",
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{content_location}}",
					"host": [
						"{{content_location}}"
					]
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "28fe7a36-50ab-4e7d-bf21-312b5f5777f3",
						"exec": [
							"// Wait between pings",
							"setTimeout(function() {}, 1000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "70688a82-d0cf-4802-b1e5-b6ad7357c926",
						"exec": [
							"if (pm.response.code == 200) {",
							"    // If response code is 200, check the response and load the urls.",
							"    pm.test(\"Patient, EOB, and Coverage in response but no errors\", function() {",
							"        pm.expect(pm.response.json().error).to.have.lengthOf(0);",
							"        pm.expect(pm.response.json().output).to.have.lengthOf(3);",
							"        pm.expect(pm.response.json().output[0].type).to.equal(\"Patient\");",
							"        pm.expect(pm.response.json().output[0].count).to.equal(2);",
							"        pm.environment.set(\"patient_url\", pm.response.json().output[0].url);",
							"        pm.expect(pm.response.json().output[1].type).to.equal(\"ExplanationOfBenefit\");",
							"        pm.expect(pm.response.json().output[1].count).to.equal(86);",
							"        pm.environment.set(\"eob_url\", pm.response.json().output[1].url);",
							"        pm.expect(pm.response.json().output[2].type).to.equal(\"Coverage\");",
							"        pm.expect(pm.response.json().output[2].count).to.equal(8);",
							"        pm.environment.set(\"coverage_url\", pm.response.json().output[2].url);",
							"    })",
							"} else {",
							"    // If response code is not 200, it should be 202. Assert that, and retry.",
							"    pm.test(\"Status code is 202\", function () {",
							"        pm.response.to.have.status(202);",
							"    });",
							"    postman.setNextRequest(\"Job response\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		},
		{
			"name": "Patient data",
			"request": {
				"description": "The patient data url comes from the response to the job in the previous request. It is in ndjson, which is a set of JSON responses, one per line. Each line contains the JSON data for one patient.",
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patient_url}}",
					"host": [
						"{{patient_url}}"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e50ce2a-4322-4723-981b-31251393b449",
						"exec": [
							"// There should be 2 patients.",
							"pm.test(\"Patient data correct\", function() {",
							"    var responseOutput = pm.response.text();",
							"    var responseLines = responseOutput.trim().split('\\n');",
							"    pm.expect(responseLines).to.have.lengthOf(2);",
							"    for (var line of responseLines) {",
							"        var lineData = JSON.parse(line);",
							"        pm.expect(lineData.resourceType).to.equal(\"Patient\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		},
		{
			"name": "Explanation of Benefit data",
			"request": {
				"description": "The explanation of benefits data url comes from the response to the job in the previous request. It is in ndjson, which is a set of JSON responses, one per line. Each line contains the JSON data for one explanation of benefits.",
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eob_url}}",
					"host": [
						"{{eob_url}}"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64383543-afd0-4aed-8e62-533892909b98",
						"exec": [
							"// There should be 86 Explanations of Benefits.",
							"pm.test(\"Explanation of Benefits data correct\", function() {",
							"    var responseOutput = pm.response.text();",
							"    var responseLines = responseOutput.trim().split('\\n');",
							"    pm.expect(responseLines).to.have.lengthOf(86);",
							"    for (var line of responseLines) {",
							"        var lineData = JSON.parse(line);",
							"        pm.expect(lineData.resourceType).to.equal(\"ExplanationOfBenefit\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		},
		{
			"name": "Coverage data",
			"request": {
				"description": "The coverage data url comes from the response to the job in the previous request. It is in ndjson, which is a set of JSON responses, one per line. Each line contains the JSON data for one coverage.",
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coverage_url}}",
					"host": [
						"{{coverage_url}}"
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "756f4c51-bce2-4a77-b3b9-bd7e96d844e5",
						"exec": [
							"// There should be 8 coverage.",
							"pm.test(\"Coverage data correct\", function() {",
							"    var responseOutput = pm.response.text();",
							"    var responseLines = responseOutput.trim().split('\\n');",
							"    pm.expect(responseLines).to.have.lengthOf(8);",
							"    for (var line of responseLines) {",
							"        var lineData = JSON.parse(line);",
							"        pm.expect(lineData.resourceType).to.equal(\"Coverage\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": []
		}
	]
}