{
	"info": {
		"_postman_id": "ef19bc1b-2082-4b65-b702-79c557084bc2",
		"name": "EndToEndRequestTest",
		"description": "This test is an example of an end to end set of API requests to submit a roster and export patient data. Each element in the 'item' list is a single request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74669933-b1a9-4350-891f-6ecb026d47e9",
								"exec": [
									"// Status should be 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\");",
									"});",
									"",
									"pm.globals.set(\"organization_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"resource\": {\n        \"resourceType\": \"Bundle\",\n        \"type\": \"collection\",\n        \"entry\": [\n          {\n            \"resource\": {\n              \"address\": [\n                {\n                  \"use\": \"work\",\n                  \"type\": \"both\",\n                  \"city\": \"PLYMOUTH\",\n                  \"country\": \"US\",\n                  \"line\": [\n                    \"275 SANDWICH STREET\"\n                  ],\n                  \"postalCode\": \"02360\",\n                  \"state\": \"MA\"\n                }\n              ],\n              \"id\": \"46ac7ad6-7487-4dd0-baa0-6e2c8cae76a0\",\n              \"identifier\": [\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n                  \"value\": \"2111111110\"\n                },\n                {\n                  \"system\": \"https://github.com/synthetichealth/synthea\",\n                  \"value\": \"46ac7ad6-7487-4dd0-baa0-6e2c8cae76a0\"\n                }\n              ],\n              \"meta\": {\n                \"lastUpdated\": \"2019-04-09T12:25:36.450512+00:00\",\n                \"versionId\": \"MTU1NDgxMjczNjQ1MDUxMjAwMA\"\n              },\n              \"name\": \"BETH ISRAEL DEACONESS HOSPITAL - PLYMOUTH\",\n              \"resourceType\": \"Organization\",\n              \"telecom\": [\n                {\n                  \"system\": \"phone\",\n                  \"value\": \"5087462000\"\n                }\n              ],\n              \"type\": [\n                {\n                  \"coding\": [\n                    {\n                      \"code\": \"prov\",\n                      \"display\": \"Healthcare Provider\",\n                      \"system\": \"http://hl7.org/fhir/organization-type\"\n                    }\n                  ],\n                  \"text\": \"Healthcare Provider\"\n                }\n              ],\n              \"endpoint\": [\n                {\n                  \"reference\": \"Endpoint/3e0f5519-c2e4-456a-b888-c4341594426f\"\n                }\n              ]\n            }\n          },\n          {\n            \"resource\": {\n              \"id\": \" \",\n              \"resourceType\": \"Endpoint\",\n              \"status\": \"test\",\n              \"connectionType\": {\n                \"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\",\n                \"code\": \"hl7-fhir-rest\"\n              },\n              \"name\": \"BETH ISRAEL DEACONESS HOSPITAL - PLYMOUTH FHIR endpoint\",\n              \"address\": \"http://test-address.first-org/fhir\",\n              \"managingOrganization\": {\n                \"reference\": \"Organization/46ac7ad6-7487-4dd0-baa0-6e2c8cae76a0\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{attribution_port}}/v1/Organization/$submit",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{attribution_port}}",
							"path": [
								"v1",
								"Organization",
								"$submit"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Create a default organization to run the tests with.\n\nThese organizations are normally created by the DPC team and are pre-existing."
					},
					"response": []
				},
				{
					"name": "Create endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b30d587b-5747-4b41-9325-0a868e56210a",
								"exec": [
									"pm.test(\"Status is 201 Created\", function () {",
									"    pm.expect(pm.response.code).equals(201);",
									"});",
									"",
									"pm.globals.set(\"endpoint_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"resourceType\": \"Endpoint\",\n\t\"status\": \"test\",\n\t\"connectionType\": {\n\t\t\"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\",\n\t\t\"code\": \"hl7-fhir-rest\"\n\t},\n\t\"name\": \"Test Organization Endpoint\",\n\t\"address\": \"http://test-address.nope\",\n\t\"managingOrganization\": {\n\t\t\"reference\": \"{{organization_id}}\"\n\t},\n\t\"payloadType\": [\n\t\t{\n\t\t\t\"coding\": {\n\t\t\t\t\"code\": \"test\",\n\t\t\t\t\"system\": \"http://www.example.com/test\"\n\t\t\t}\n\t\t}\n\t]\n}\n    "
						},
						"url": {
							"raw": "http://{{hostname}}:{{attribution_port}}/v1/Endpoint",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{attribution_port}}",
							"path": [
								"v1",
								"Endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50437cf8-aaf6-4f9b-9e40-4ea50c788820",
								"exec": [
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body matches expected response\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.name).equals(\"Test Organization Endpoint\");",
									"    pm.expect(respJson.status).equals(\"test\");",
									"    pm.expect(respJson.address).equals(\"http://test-address.nope\");",
									"    pm.expect(respJson.connectionType.system).equals(\"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\");",
									"    pm.expect(respJson.connectionType.code).equals(\"hl7-fhir-rest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Endpoint/{{endpoint_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Endpoint",
								"{{endpoint_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create consent record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58421265-29f7-407c-a5cc-289820e44ef7",
								"exec": [
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response should contain submitted values\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.resourceType).to.equal(\"Consent\")",
									"    pm.expect(respJson.text.div).contains(\"OPTOUT\");",
									"    pm.expect(respJson.policyRule).to.equal(\"http://hl7.org/fhir/ConsentPolicy/opt-out\");",
									"})",
									"",
									"pm.globals.set(\"consent_id\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"resourceType\": \"Consent\",\n\t\"status\": \"active\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://loinc.org\",\n\t\t\t\"code\": \"64292-6\"\n\t\t}]\n\t}],\n\t\"patient\": {\n\t\t\"reference\": \"http://api.url/Patient?identity=|0OO0OO0OO00\"\n\t},\n\t\"organization\": {\n\t\t\"reference\": \"{{organization_id}}\"\n\t},\n\t\"policyRule\": \"http://hl7.org/fhir/ConsentPolicy/opt-out\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{consent_port}}/v1/Consent",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{consent_port}}",
							"path": [
								"v1",
								"Consent"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Roster tests",
			"item": [
				{
					"name": "Register providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd74b43f-2194-42ac-8ea1-f7168e034cb9",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"// Parse the Bundle and get a list of practitioner ids ",
									"pm.test(\"Practitioner bundle correct\", function() {",
									"    pm.response.to.be.ok;",
									"    var responseOutput = pm.response.json();",
									"    pm.expect(responseOutput.entry.length).to.equal(1);",
									"    pm.expect(responseOutput.entry[0].resource.identifier[0].system).to.equal(\"http://hl7.org/fhir/sid/us-npi\");",
									"    pm.environment.set(\"provider_npi\", responseOutput.entry[0].resource.identifier[0].value);",
									"    pm.environment.set(\"provider_id\", responseOutput.entry[0].resource.id)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"resource\",\n      \"resource\": {\n        \"resourceType\": \"Bundle\",\n        \"id\": \"12345\",\n        \"type\": \"collection\",\n        \"entry\": [\n          {\n            \"resource\": {\n              \"active\": true,\n              \"address\": [\n                {\n                  \"city\": \"PLYMOUTH\",\n                  \"country\": \"US\",\n                  \"line\": [\n                    \"275 SANDWICH STREET\"\n                  ],\n                  \"postalCode\": \"02360\",\n                  \"state\": \"MA\"\n                }\n              ],\n              \"gender\": \"male\",\n              \"id\": \"0c527d2e-2e8a-4808-b11d-0fa06baf8254\",\n              \"identifier\": [\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n                  \"value\": \"2459425221\"\n                }\n              ],\n              \"meta\": {\n                \"profile\": [\n                  \"https://dpc.cms.gov/api/v1/StructureDefinition/dpc-profile-practitioner\"\n                ],\n                \"lastUpdated\": \"2019-04-09T12:25:36.450182+00:00\",\n                \"versionId\": \"MTU1NDgxMjczNjQ1MDE4MjAwMA\"\n              },\n              \"name\": [\n                {\n                  \"family\": \"Klocko335\",\n                  \"given\": [\n                    \"Leonard963\"\n                  ],\n                  \"prefix\": [\n                    \"Dr.\"\n                  ]\n                }\n              ],\n              \"resourceType\": \"Practitioner\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Practitioner/$submit",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Practitioner",
								"$submit"
							]
						},
						"description": "Register providers with the given Organization"
					},
					"response": []
				},
				{
					"name": "Register patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd74b43f-2194-42ac-8ea1-f7168e034cb9",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"// Parse the Bundle and get a list of practitioner ids ",
									"pm.test(\"Patient bundle correct\", function() {",
									"    pm.response.to.be.ok;",
									"    var responseOutput = pm.response.json();",
									"    pm.expect(responseOutput.entry.length).to.equal(5);",
									"    ",
									"    var patientIDs = [];",
									"    responseOutput.entry.forEach(function (entry) {patientIDs.push(\"Patient/\" + entry.resource.id)});",
									"    console.log(patientIDs);",
									"    pm.globals.set(\"patient_ids\", JSON.stringify(patientIDs));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"resource\",\n      \"resource\": {\n        \"resourceType\": \"Bundle\",\n        \"id\": \"12345\",\n        \"type\": \"collection\",\n        \"entry\": [\n          {\n            \"resource\": {\n              \"resourceType\": \"Patient\",\n              \"id\": \"728b270d-d7de-4143-82fe-d3ccd92cebe4\",\n              \"meta\": {\n                \"profile\": [\n                  \"https://dpc.cms.gov/api/v1/StructureDefinition/dpc-profile-patient\"\n                ],\n                \"versionId\": \"MTU1NDgxMjczNTM5MjYwMDAwMA\",\n                \"lastUpdated\": \"2019-04-09T12:25:35.392600+00:00\"\n              },\n              \"text\": {\n                \"status\": \"generated\",\n                \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Generated by <a href=\\\"https://github.com/synthetichealth/synthea\\\">Synthea</a>.Version identifier: v2.2.0-56-g113d8a2d\\n .   Person seed: -5708762760784740351  Population seed: 5</div>\"\n              },\n              \"extension\": [\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2106-3\",\n                        \"display\": \"White\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"White\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2186-5\",\n                        \"display\": \"Not Hispanic or Latino\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Not Hispanic or Latino\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName\",\n                  \"valueString\": \"Corinna386 Kulas532\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\",\n                  \"valueCode\": \"M\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/birthPlace\",\n                  \"valueAddress\": {\n                    \"city\": \"Sandwich\",\n                    \"state\": \"Massachusetts\",\n                    \"country\": \"US\"\n                  }\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/disability-adjusted-life-years\",\n                  \"valueDecimal\": 2.1052411837922023\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/quality-adjusted-life-years\",\n                  \"valueDecimal\": 72.8947588162078\n                }\n              ],\n              \"identifier\": [\n                {\n                  \"system\": \"https://github.com/synthetichealth/synthea\",\n                  \"value\": \"b02886ea-3925-41d4-b606-377ae05eea78\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"MR\",\n                        \"display\": \"Medical Record Number\"\n                      }\n                    ],\n                    \"text\": \"Medical Record Number\"\n                  },\n                  \"system\": \"http://hospital.smarthealthit.org\",\n                  \"value\": \"b02886ea-3925-41d4-b606-377ae05eea78\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/identifier-type\",\n                        \"code\": \"SB\",\n                        \"display\": \"Social Security Number\"\n                      }\n                    ],\n                    \"text\": \"Social Security Number\"\n                  },\n                  \"system\": \"http://hl7.org/fhir/sid/us-ssn\",\n                  \"value\": \"999-14-7088\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"DL\",\n                        \"display\": \"Driver's License\"\n                      }\n                    ],\n                    \"text\": \"Driver's License\"\n                  },\n                  \"system\": \"urn:oid:2.16.840.1.113883.4.3.25\",\n                  \"value\": \"S99933145\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"PPN\",\n                        \"display\": \"Passport Number\"\n                      }\n                    ],\n                    \"text\": \"Passport Number\"\n                  },\n                  \"system\": \"http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber\",\n                  \"value\": \"X51147095X\"\n                },\n                {\n                  \"system\": \"https://bluebutton.cms.gov/resources/variables/bene_id\",\n                  \"value\": \"20000000001809\"\n                },\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n                  \"value\": \"1SQ3F00AA00\"\n                }\n              ],\n              \"name\": [\n                {\n                  \"use\": \"official\",\n                  \"family\": \"Prosacco716\",\n                  \"given\": [\n                    \"Jonathan639\"\n                  ],\n                  \"prefix\": [\n                    \"Mr.\"\n                  ]\n                }\n              ],\n              \"telecom\": [\n                {\n                  \"system\": \"phone\",\n                  \"value\": \"555-719-3748\",\n                  \"use\": \"home\"\n                }\n              ],\n              \"gender\": \"male\",\n              \"birthDate\": \"1943-06-08\",\n              \"address\": [\n                {\n                  \"extension\": [\n                    {\n                      \"url\": \"http://hl7.org/fhir/StructureDefinition/geolocation\",\n                      \"extension\": [\n                        {\n                          \"url\": \"latitude\",\n                          \"valueDecimal\": 42.187011\n                        },\n                        {\n                          \"url\": \"longitude\",\n                          \"valueDecimal\": -71.30040799999998\n                        }\n                      ]\n                    }\n                  ],\n                  \"line\": [\n                    \"1038 Ratke Throughway Apt 10\"\n                  ],\n                  \"city\": \"Medfield\",\n                  \"state\": \"Massachusetts\",\n                  \"postalCode\": \"02052\",\n                  \"country\": \"US\"\n                }\n              ],\n              \"maritalStatus\": {\n                \"coding\": [\n                  {\n                    \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n                    \"code\": \"M\",\n                    \"display\": \"M\"\n                  }\n                ],\n                \"text\": \"M\"\n              },\n              \"multipleBirthBoolean\": false,\n              \"communication\": [\n                {\n                  \"language\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"urn:ietf:bcp:47\",\n                        \"code\": \"en-US\",\n                        \"display\": \"English\"\n                      }\n                    ],\n                    \"text\": \"English\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"resource\": {\n              \"resourceType\": \"Patient\",\n              \"id\": \"6f7acde5-db81-4361-82cf-886893a3280c\",\n              \"meta\": {\n                \"profile\": [\n                  \"https://dpc.cms.gov/api/v1/StructureDefinition/dpc-profile-patient\"\n                ],\n                \"versionId\": \"MTU1NDgxMjczNjQ1MTMxNjAwMA\",\n                \"lastUpdated\": \"2019-04-09T12:25:36.451316+00:00\"\n              },\n              \"text\": {\n                \"status\": \"generated\",\n                \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Generated by <a href=\\\"https://github.com/synthetichealth/synthea\\\">Synthea</a>.Version identifier: v2.2.0-56-g113d8a2d\\n .   Person seed: 8417064283020065324  Population seed: 5</div>\"\n              },\n              \"extension\": [\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2106-3\",\n                        \"display\": \"White\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"White\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2186-5\",\n                        \"display\": \"Not Hispanic or Latino\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Not Hispanic or Latino\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName\",\n                  \"valueString\": \"Krysta658 Terry864\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\",\n                  \"valueCode\": \"M\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/birthPlace\",\n                  \"valueAddress\": {\n                    \"city\": \"Lisbon\",\n                    \"state\": \"Estremadura\",\n                    \"country\": \"PT\"\n                  }\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/disability-adjusted-life-years\",\n                  \"valueDecimal\": 0\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/quality-adjusted-life-years\",\n                  \"valueDecimal\": 27\n                }\n              ],\n              \"identifier\": [\n                {\n                  \"system\": \"https://github.com/synthetichealth/synthea\",\n                  \"value\": \"a238ebf2-392b-44be-9a17-da07a15220e2\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"MR\",\n                        \"display\": \"Medical Record Number\"\n                      }\n                    ],\n                    \"text\": \"Medical Record Number\"\n                  },\n                  \"system\": \"http://hospital.smarthealthit.org\",\n                  \"value\": \"a238ebf2-392b-44be-9a17-da07a15220e2\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/identifier-type\",\n                        \"code\": \"SB\",\n                        \"display\": \"Social Security Number\"\n                      }\n                    ],\n                    \"text\": \"Social Security Number\"\n                  },\n                  \"system\": \"http://hl7.org/fhir/sid/us-ssn\",\n                  \"value\": \"999-99-7515\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"DL\",\n                        \"display\": \"Driver's License\"\n                      }\n                    ],\n                    \"text\": \"Driver's License\"\n                  },\n                  \"system\": \"urn:oid:2.16.840.1.113883.4.3.25\",\n                  \"value\": \"S99942098\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"PPN\",\n                        \"display\": \"Passport Number\"\n                      }\n                    ],\n                    \"text\": \"Passport Number\"\n                  },\n                  \"system\": \"http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber\",\n                  \"value\": \"X19416767X\"\n                },\n                {\n                  \"system\": \"https://bluebutton.cms.gov/resources/variables/bene_id\",\n                  \"value\": \"19990000002210\"\n                },\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n                  \"value\": \"5S58A00AA00\"\n                }\n              ],\n              \"name\": [\n                {\n                  \"use\": \"official\",\n                  \"family\": \"Hettinger594\",\n                  \"given\": [\n                    \"Gregg522\"\n                  ],\n                  \"prefix\": [\n                    \"Mr.\"\n                  ]\n                }\n              ],\n              \"telecom\": [\n                {\n                  \"system\": \"phone\",\n                  \"value\": \"555-282-3544\",\n                  \"use\": \"home\"\n                }\n              ],\n              \"gender\": \"male\",\n              \"birthDate\": \"1991-02-10\",\n              \"address\": [\n                {\n                  \"extension\": [\n                    {\n                      \"url\": \"http://hl7.org/fhir/StructureDefinition/geolocation\",\n                      \"extension\": [\n                        {\n                          \"url\": \"latitude\",\n                          \"valueDecimal\": 41.875179\n                        },\n                        {\n                          \"url\": \"longitude\",\n                          \"valueDecimal\": -70.74671500000002\n                        }\n                      ]\n                    }\n                  ],\n                  \"line\": [\n                    \"1087 Halvorson Light\"\n                  ],\n                  \"city\": \"Carver\",\n                  \"state\": \"Massachusetts\",\n                  \"postalCode\": \"02330\",\n                  \"country\": \"US\"\n                }\n              ],\n              \"maritalStatus\": {\n                \"coding\": [\n                  {\n                    \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n                    \"code\": \"M\",\n                    \"display\": \"M\"\n                  }\n                ],\n                \"text\": \"M\"\n              },\n              \"multipleBirthBoolean\": false,\n              \"communication\": [\n                {\n                  \"language\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"urn:ietf:bcp:47\",\n                        \"code\": \"pt\",\n                        \"display\": \"Portuguese\"\n                      }\n                    ],\n                    \"text\": \"Portuguese\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"resource\": {\n              \"resourceType\": \"Patient\",\n              \"id\": \"78b28fcd-c455-4da1-81c5-ba94c1f3f5b6\",\n              \"meta\": {\n                \"profile\": [\n                  \"https://dpc.cms.gov/api/v1/StructureDefinition/dpc-profile-patient\"\n                ],\n                \"versionId\": \"MTU1NDgxMjczMjE4MzkxMTAwMA\",\n                \"lastUpdated\": \"2019-04-09T12:25:32.183911+00:00\"\n              },\n              \"text\": {\n                \"status\": \"generated\",\n                \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Generated by <a href=\\\"https://github.com/synthetichealth/synthea\\\">Synthea</a>.Version identifier: v2.2.0-56-g113d8a2d\\n .   Person seed: -6401729164520795196  Population seed: 5</div>\"\n              },\n              \"extension\": [\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2106-3\",\n                        \"display\": \"White\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"White\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2186-5\",\n                        \"display\": \"Not Hispanic or Latino\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Not Hispanic or Latino\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName\",\n                  \"valueString\": \"Sharonda198 Turner526\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\",\n                  \"valueCode\": \"F\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/birthPlace\",\n                  \"valueAddress\": {\n                    \"city\": \"Acushnet\",\n                    \"state\": \"Massachusetts\",\n                    \"country\": \"US\"\n                  }\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/disability-adjusted-life-years\",\n                  \"valueDecimal\": 0\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/quality-adjusted-life-years\",\n                  \"valueDecimal\": 10\n                }\n              ],\n              \"identifier\": [\n                {\n                  \"system\": \"https://github.com/synthetichealth/synthea\",\n                  \"value\": \"643d00f0-c49a-43df-839b-b7e8d4cf0fd8\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"MR\",\n                        \"display\": \"Medical Record Number\"\n                      }\n                    ],\n                    \"text\": \"Medical Record Number\"\n                  },\n                  \"system\": \"http://hospital.smarthealthit.org\",\n                  \"value\": \"643d00f0-c49a-43df-839b-b7e8d4cf0fd8\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/identifier-type\",\n                        \"code\": \"SB\",\n                        \"display\": \"Social Security Number\"\n                      }\n                    ],\n                    \"text\": \"Social Security Number\"\n                  },\n                  \"system\": \"http://hl7.org/fhir/sid/us-ssn\",\n                  \"value\": \"999-14-5453\"\n                },\n                {\n                  \"system\": \"https://bluebutton.cms.gov/resources/variables/bene_id\",\n                  \"value\": \"19990000002209\"\n                },\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n                  \"value\": \"4S58A00AA00\"\n                }\n              ],\n              \"name\": [\n                {\n                  \"use\": \"official\",\n                  \"family\": \"Homenick806\",\n                  \"given\": [\n                    \"Angla303\"\n                  ]\n                }\n              ],\n              \"telecom\": [\n                {\n                  \"system\": \"phone\",\n                  \"value\": \"555-684-1164\",\n                  \"use\": \"home\"\n                }\n              ],\n              \"gender\": \"female\",\n              \"birthDate\": \"2008-11-27\",\n              \"address\": [\n                {\n                  \"extension\": [\n                    {\n                      \"url\": \"http://hl7.org/fhir/StructureDefinition/geolocation\",\n                      \"extension\": [\n                        {\n                          \"url\": \"latitude\",\n                          \"valueDecimal\": 42.375967\n                        },\n                        {\n                          \"url\": \"longitude\",\n                          \"valueDecimal\": -71.118275\n                        }\n                      ]\n                    }\n                  ],\n                  \"line\": [\n                    \"420 Heathcote Lane Apt 31\"\n                  ],\n                  \"city\": \"Cambridge\",\n                  \"state\": \"Massachusetts\",\n                  \"postalCode\": \"02138\",\n                  \"country\": \"US\"\n                }\n              ],\n              \"maritalStatus\": {\n                \"coding\": [\n                  {\n                    \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n                    \"code\": \"S\",\n                    \"display\": \"Never Married\"\n                  }\n                ],\n                \"text\": \"Never Married\"\n              },\n              \"multipleBirthBoolean\": false,\n              \"communication\": [\n                {\n                  \"language\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"urn:ietf:bcp:47\",\n                        \"code\": \"en-US\",\n                        \"display\": \"English\"\n                      }\n                    ],\n                    \"text\": \"English\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"resource\": {\n              \"resourceType\": \"Patient\",\n              \"id\": \"5acc8bb4-2d14-4461-a560-228d96459cc3\",\n              \"meta\": {\n                \"profile\": [\n                  \"https://dpc.cms.gov/api/v1/StructureDefinition/dpc-profile-patient\"\n                ],\n                \"versionId\": \"MTU1NDgxMjczMzI3NTg1MTAwMA\",\n                \"lastUpdated\": \"2019-04-09T12:25:33.275851+00:00\"\n              },\n              \"text\": {\n                \"status\": \"generated\",\n                \"div\": \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Generated by <a href=\\\"https://github.com/synthetichealth/synthea\\\">Synthea</a>.Version identifier: v2.2.0-56-g113d8a2d\\n .   Person seed: 4341587697174998554  Population seed: 5</div>\"\n              },\n              \"extension\": [\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2028-9\",\n                        \"display\": \"Asian\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Asian\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2186-5\",\n                        \"display\": \"Not Hispanic or Latino\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Not Hispanic or Latino\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName\",\n                  \"valueString\": \"Jeanett771 Grant908\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\",\n                  \"valueCode\": \"F\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/birthPlace\",\n                  \"valueAddress\": {\n                    \"city\": \"Watertown Town\",\n                    \"state\": \"Massachusetts\",\n                    \"country\": \"US\"\n                  }\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/disability-adjusted-life-years\",\n                  \"valueDecimal\": 0.1695609783833971\n                },\n                {\n                  \"url\": \"http://synthetichealth.github.io/synthea/quality-adjusted-life-years\",\n                  \"valueDecimal\": 34.830439021616606\n                }\n              ],\n              \"identifier\": [\n                {\n                  \"system\": \"https://github.com/synthetichealth/synthea\",\n                  \"value\": \"15cd4083-8a2c-4a0c-be30-ccbf860ce8b2\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"MR\",\n                        \"display\": \"Medical Record Number\"\n                      }\n                    ],\n                    \"text\": \"Medical Record Number\"\n                  },\n                  \"system\": \"http://hospital.smarthealthit.org\",\n                  \"value\": \"15cd4083-8a2c-4a0c-be30-ccbf860ce8b2\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/identifier-type\",\n                        \"code\": \"SB\",\n                        \"display\": \"Social Security Number\"\n                      }\n                    ],\n                    \"text\": \"Social Security Number\"\n                  },\n                  \"system\": \"http://hl7.org/fhir/sid/us-ssn\",\n                  \"value\": \"999-76-5212\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"DL\",\n                        \"display\": \"Driver's License\"\n                      }\n                    ],\n                    \"text\": \"Driver's License\"\n                  },\n                  \"system\": \"urn:oid:2.16.840.1.113883.4.3.25\",\n                  \"value\": \"S99977603\"\n                },\n                {\n                  \"type\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"http://hl7.org/fhir/v2/0203\",\n                        \"code\": \"PPN\",\n                        \"display\": \"Passport Number\"\n                      }\n                    ],\n                    \"text\": \"Passport Number\"\n                  },\n                  \"system\": \"http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber\",\n                  \"value\": \"X23669981X\"\n                },\n                {\n                  \"system\": \"https://bluebutton.cms.gov/resources/variables/bene_id\",\n                  \"value\": \"19990000002208\"\n                },\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n                  \"value\": \"3S58A00AA00\"\n                }\n              ],\n              \"name\": [\n                {\n                  \"use\": \"official\",\n                  \"family\": \"Koch169\",\n                  \"given\": [\n                    \"Astrid395\"\n                  ],\n                  \"prefix\": [\n                    \"Mrs.\"\n                  ]\n                },\n                {\n                  \"use\": \"maiden\",\n                  \"family\": \"Dooley940\",\n                  \"given\": [\n                    \"Astrid395\"\n                  ],\n                  \"prefix\": [\n                    \"Mrs.\"\n                  ]\n                }\n              ],\n              \"telecom\": [\n                {\n                  \"system\": \"phone\",\n                  \"value\": \"555-831-9746\",\n                  \"use\": \"home\"\n                }\n              ],\n              \"gender\": \"female\",\n              \"birthDate\": \"1983-02-03\",\n              \"address\": [\n                {\n                  \"extension\": [\n                    {\n                      \"url\": \"http://hl7.org/fhir/StructureDefinition/geolocation\",\n                      \"extension\": [\n                        {\n                          \"url\": \"latitude\",\n                          \"valueDecimal\": 42.375967\n                        },\n                        {\n                          \"url\": \"longitude\",\n                          \"valueDecimal\": -71.118275\n                        }\n                      ]\n                    }\n                  ],\n                  \"line\": [\n                    \"805 McKenzie Grove Suite 75\"\n                  ],\n                  \"city\": \"Cambridge\",\n                  \"state\": \"Massachusetts\",\n                  \"postalCode\": \"02138\",\n                  \"country\": \"US\"\n                }\n              ],\n              \"maritalStatus\": {\n                \"coding\": [\n                  {\n                    \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n                    \"code\": \"M\",\n                    \"display\": \"M\"\n                  }\n                ],\n                \"text\": \"M\"\n              },\n              \"multipleBirthBoolean\": false,\n              \"communication\": [\n                {\n                  \"language\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"urn:ietf:bcp:47\",\n                        \"code\": \"en-US\",\n                        \"display\": \"English\"\n                      }\n                    ],\n                    \"text\": \"English\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"resource\": {\n              \"resourceType\": \"Patient\",\n              \"id\": \"537c9ff4-e37f-45ce-b363-5a75c9bda818\",\n              \"meta\": {\n                \"profile\": [\n                  \"https://dpc.cms.gov/api/v1/StructureDefinition/dpc-profile-patient\"\n                ],\n                \"versionId\": \"MTU1NDgxMjczMzI3NTg1MTAwMA\",\n                \"lastUpdated\": \"2019-04-09T12:25:33.275851+00:00\"\n              },\n              \"extension\": [\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-race\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2028-9\",\n                        \"display\": \"Asian\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Asian\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\",\n                  \"extension\": [\n                    {\n                      \"url\": \"ombCategory\",\n                      \"valueCoding\": {\n                        \"system\": \"urn:oid:2.16.840.1.113883.6.238\",\n                        \"code\": \"2186-5\",\n                        \"display\": \"Not Hispanic or Latino\"\n                      }\n                    },\n                    {\n                      \"url\": \"text\",\n                      \"valueString\": \"Not Hispanic or Latino\"\n                    }\n                  ]\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName\",\n                  \"valueString\": \"Susan381 Wilson012\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\",\n                  \"valueCode\": \"F\"\n                },\n                {\n                  \"url\": \"http://hl7.org/fhir/StructureDefinition/birthPlace\",\n                  \"valueAddress\": {\n                    \"city\": \"Burlington\",\n                    \"state\": \"Vermont\",\n                    \"country\": \"US\"\n                  }\n                }\n              ],\n              \"identifier\": [\n                {\n                  \"system\": \"http://hl7.org/fhir/sid/us-mbi\",\n                  \"value\": \"0S80C00AA00\"\n                }\n              ],\n              \"name\": [\n                {\n                  \"use\": \"official\",\n                  \"family\": \"Adams332\",\n                  \"given\": [\n                    \"Astrid201\"\n                  ],\n                  \"prefix\": [\n                    \"Ms.\"\n                  ]\n                },\n              ],\n              \"telecom\": [\n                {\n                  \"system\": \"phone\",\n                  \"value\": \"555-831-9746\",\n                  \"use\": \"home\"\n                }\n              ],\n              \"gender\": \"female\",\n              \"birthDate\": \"1940-01-01\",\n              \"address\": [\n                {\n                  \"line\": [\n                    \"805 McKenzie Grove Suite 75\"\n                  ],\n                  \"city\": \"Cambridge\",\n                  \"state\": \"Massachusetts\",\n                  \"postalCode\": \"02138\",\n                  \"country\": \"US\"\n                }\n              ],\n              \"maritalStatus\": {\n                \"coding\": [\n                  {\n                    \"system\": \"http://hl7.org/fhir/v3/MaritalStatus\",\n                    \"code\": \"M\",\n                    \"display\": \"M\"\n                  }\n                ],\n                \"text\": \"M\"\n              },\n              \"multipleBirthBoolean\": false,\n              \"communication\": [\n                {\n                  \"language\": {\n                    \"coding\": [\n                      {\n                        \"system\": \"urn:ietf:bcp:47\",\n                        \"code\": \"en-US\",\n                        \"display\": \"English\"\n                      }\n                    ],\n                    \"text\": \"English\"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Patient/$submit",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Patient",
								"$submit"
							]
						},
						"description": "Submit a bundle of patients to register in a single try"
					},
					"response": []
				},
				{
					"name": "Submit roster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72634c6f-4d6b-49b9-b4db-b172af0f04f1",
								"exec": [
									"// Status should be 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Response Body is correct\", () => {",
									"    console.log(\"Body correct?\");",
									"    // Check to ensure that each member id matches what we previously had",
									"    var response = pm.response.json();",
									"    ",
									"    // Ensure that the Patient IDs haven't changed.",
									"    pm.expect(response.member.length).to.equal(5);",
									"    var ids = new Set(JSON.parse(pm.globals.get(\"patient_ids\")));",
									"    response.member.forEach(member => {",
									"        pm.expect(ids.has(member.entity.reference)).to.be.true;",
									"        // Ensure that the period temporals are not the same",
									"        pm.expect(member.period.start).to.not.equal(member.period.end);",
									"    });",
									"",
									"    pm.globals.set(\"attribution_group_id\", response.id);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f1696a-ac0b-472e-af63-2215ba3231a1",
								"exec": [
									"var group = {",
									"  \"resourceType\": \"Group\",",
									"  \"actual\": true,",
									"  \"active\": true,",
									"  \"type\": \"person\",",
									"  \"characteristic\": [",
									"    {",
									"      \"code\": {",
									"        \"coding\": [",
									"          {",
									"            \"code\": \"attributed-to\"",
									"          }",
									"        ]",
									"      },",
									"      \"valueCodeableConcept\": {",
									"          \"coding\": [",
									"            {",
									"              \"system\": \"http://hl7.org/fhir/sid/us-npi\",",
									"              \"code\": \"2459425221\"",
									"            }",
									"          ]",
									"      }",
									"    }",
									"  ],",
									"  \"member\": []",
									"};",
									"",
									"JSON.parse(pm.globals.get(\"patient_ids\")).forEach(id => group.member.push(",
									"    {",
									"      \"entity\": {",
									"        \"reference\": id",
									"      }",
									"    }))",
									"    ",
									"console.log(\"Group:\", group);",
									"pm.environment.set(\"roster_body\", JSON.stringify(group));",
									"",
									"",
									"// Build the attestation header",
									"var attestation = {",
									"    \"resourceType\": \"Provenance\",",
									"    \"recorded\": new Date(),",
									"    \"reason\": [",
									"        {",
									"      \"system\": \"http://hl7.org/fhir/v3/ActReason\",",
									"      \"code\": \"TREAT\"",
									"    }],",
									"    \"agent\": [",
									"    {",
									"      \"role\": [",
									"        {",
									"          \"coding\": [",
									"            {",
									"              \"system\": \"http://hl7.org/fhir/v3/RoleClass\",",
									"              \"code\": \"AGNT\"",
									"            }",
									"          ]",
									"        }",
									"      ],",
									"      \"whoReference\": {",
									"        \"reference\": `Organization/${pm.globals.get(\"organization_id\")}`",
									"      },",
									"      \"onBehalfOfReference\": {",
									"        \"reference\": `Practitioner/${pm.environment.get(\"provider_id\")}`",
									"      }",
									"    }",
									"  ]",
									"}",
									"",
									"pm.environment.set(\"attestationHeader\", JSON.stringify(attestation))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "X-Provenance",
								"value": "{{attestationHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{roster_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group"
							]
						},
						"description": "This request submits the roster for the provider. The roster data is in the `body` field of the request. It's easier to see in the Postman GUI."
					},
					"response": []
				},
				{
					"name": "Find patient by MBI",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe0ae12-2d35-44bc-a180-d22af323a989",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Bundle should have a single entry\", function() {",
									"    var response = pm.response.json();",
									"",
									"    // Should be a search set with 1 entry",
									"    pm.expect(response.type).to.equal(\"searchset\")",
									"    pm.expect(response.total).to.equal(1);",
									"",
									"    pm.globals.set(\"single_patient_id\", \"Patient/\" + response.entry[0].resource.id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Patient?identifier=1SQ3F00AA00",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Patient"
							],
							"query": [
								{
									"key": "identifier",
									"value": "1SQ3F00AA00"
								}
							]
						},
						"description": "Finds the Patient resource with the specified MBI.\n\nThis is used in the following tests in order to add/remove the patient from the attribution roster"
					},
					"response": []
				},
				{
					"name": "Find provider Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe0ae12-2d35-44bc-a180-d22af323a989",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Bundle should have a single entry\", function() {",
									"    var response = pm.response.json();",
									"    ",
									"    // Should be a search set with 1 entry",
									"    pm.expect(response.type).to.equal(\"searchset\")",
									"    pm.expect(response.total).to.equal(1);",
									"    ",
									"    console.log(\"Entry:\", response.entry[0]);",
									"    console.log(\"Stringed: \", JSON.stringify(response));",
									"    pm.globals.set(\"attribution_group\", JSON.stringify(response.entry[0].resource));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group?characteristic-value=attributed-to$2459425221",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group"
							],
							"query": [
								{
									"key": "characteristic-value",
									"value": "attributed-to$2459425221"
								}
							]
						},
						"description": "Finds the attribution group for the given provider NPI."
					},
					"response": []
				},
				{
					"name": "Remove patient from roster",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6abd191-547c-476b-b6f9-778097f05b8e",
								"exec": [
									"var group = JSON.parse(pm.globals.get(\"attribution_group\"));",
									"var patientID = pm.globals.get(\"single_patient_id\");",
									"console.log(\"Group:\", group);",
									"console.log(\"Pat: \", patientID);",
									"",
									"// Find the patient in the group and set it inactive.",
									"console.log(group.member);",
									"group.member = group.member.filter(member => {",
									"    var m  = member.entity.reference;",
									"    console.log(\"id: \" + m + \" pat: \" + patientID);",
									"    return m === patientID;",
									"});",
									"",
									"pm.environment.set(\"roster_body\", JSON.stringify(group))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4c73864-2ec4-4bae-82cd-383a965c9eac",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Group should have one inactive member\", function() {",
									"    var response = pm.response.json();",
									"    ",
									"    // Should be a search set with one less entry",
									"    console.debug(response.member);",
									"    pm.expect(response.member.filter(member => member.inactive === false)).to.have.lengthOf(4);",
									"    pm.expect(response.member.filter(member => member.inactive === true)).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{roster_body}}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{attribution_group_id}}/$remove",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group",
								"{{attribution_group_id}}",
								"$remove"
							]
						},
						"description": "Remove a patient from the attribution roster."
					},
					"response": []
				},
				{
					"name": "Add unknown patient to Roster",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6abd191-547c-476b-b6f9-778097f05b8e",
								"exec": [
									"// Build the attestation header",
									"var attestation = {",
									"    \"resourceType\": \"Provenance\",",
									"    \"recorded\": new Date(),",
									"    \"reason\": [",
									"        {",
									"      \"system\": \"http://hl7.org/fhir/v3/ActReason\",",
									"      \"code\": \"TREAT\"",
									"    }],",
									"    \"agent\": [",
									"    {",
									"      \"role\": [",
									"        {",
									"          \"coding\": [",
									"            {",
									"              \"system\": \"http://hl7.org/fhir/v3/RoleClass\",",
									"              \"code\": \"AGNT\"",
									"            }",
									"          ]",
									"        }",
									"      ],",
									"      \"whoReference\": {",
									"        \"reference\": `Organization/${pm.globals.get(\"organization_id\")}`",
									"      },",
									"      \"onBehalfOfReference\": {",
									"        \"reference\": `Practitioner/${pm.environment.get(\"provider_id\")}`",
									"      }",
									"    }",
									"  ]",
									"}",
									"",
									"pm.environment.set(\"attestationHeader\", JSON.stringify(attestation))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4c73864-2ec4-4bae-82cd-383a965c9eac",
								"exec": [
									"// Status should be 400",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Outcome has a useful error message\", function() {",
									"    var response = pm.response.json();",
									"    ",
									"    // Should be a search set with one less entry",
									"    pm.expect(response.issue).to.have.length(1);",
									"    pm.expect(response.issue[0].details.text).to.have.string('Cannot find patient with ID');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							},
							{
								"key": "X-Provenance",
								"value": "{{attestationHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resourceType\": \"Group\",\n  \"actual\": true,\n  \"active\": true,\n  \"type\": \"person\",\n  \"characteristic\": [\n    {\n      \"code\": {\n        \"coding\": [\n          {\n            \"code\": \"attributed-to\"\n          }\n        ]\n      },\n      \"valueCodeableConcept\": {\n          \"coding\": [\n            {\n              \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n              \"code\": \"2459425221\"\n            }\n          ]\n      }\n    }\n  ],\n  \"member\": [{\n  \"entity\": {\n        \"reference\": \"Patient/c22044f0-3b8e-488c-bcd4-fcbc630d9c19\"\n      }\n  }]\n}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{attribution_group_id}}/$add",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group",
								"{{attribution_group_id}}",
								"$add"
							]
						},
						"description": "Try to add a patient to the roster, but one that doesn't actually exist."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bulk Export",
			"item": [
				{
					"name": "Try export after submitting roster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5497fa12-aefd-44c2-9254-2beb51c52e31",
								"exec": [
									"// Status should be 202",
									"pm.test(\"Status is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// Url for job response should be in content-location header.",
									"pm.test(\"Content-Location header is present\", function () {",
									"    pm.response.to.have.header(\"Content-Location\");",
									"});",
									"",
									"if (pm.response.headers.get(\"Content-Location\")) {",
									"  pm.environment.set(\"content_location\", pm.response.headers.get(\"Content-Location\"));",
									"} else {",
									"  // Fail the test, no content location.",
									"  postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8b8d6363-b490-428a-bfee-663b184ae05d",
								"exec": [
									"console.log(\"Group:\", pm.environment.get(\"attribution_group\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/fhir+json"
							},
							{
								"key": "Prefer",
								"type": "text",
								"value": "respond-async"
							}
						],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{attribution_group_id}}/$export",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group",
								"{{attribution_group_id}}",
								"$export"
							]
						},
						"description": "After submitting the roster, the export request should succeed, with a 202 status and the location for the job response in the `content-location` header."
					},
					"response": []
				},
				{
					"name": "Job response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28fe7a36-50ab-4e7d-bf21-312b5f5777f3",
								"exec": [
									"// Wait between pings",
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "70688a82-d0cf-4802-b1e5-b6ad7357c926",
								"exec": [
									"if (pm.response.code == 200) {",
									"    // Response should have FHIR Content-Type",
									"    pm.test(\"Content-type is application/json\", function() {",
									"       pm.response.to.have.header(\"Content-Type\", \"application/json\"); ",
									"    });",
									"    ",
									"    // If response code is 200, check the response and load the urls.",
									"    pm.test(\"Patient, EOB, and Coverage resources; one error file\", function() {",
                                    "        pm.expect(pm.response.json().error).to.have.lengthOf(0);",
                                    "        pm.expect(pm.response.json().output).to.have.lengthOf(3);",
                                    "        ",
                                    "        // Order of the output types is not guarenteed",
                                    "        var outputTypes = pm.response.json().output.map((elem) => elem.type);",
                                    "        pm.expect(outputTypes).to.include(\"Patient\");",
                                    "        pm.expect(outputTypes).to.include(\"Coverage\");",
                                    "        pm.expect(outputTypes).to.include(\"ExplanationOfBenefit\"); ",
                                    "        ",
                                    "        // Patient",
                                    "        var patient = pm.response.json().output.filter((elem) => elem.type == \"Patient\")[0]; ",
                                    "        console.log(\"patient: \", patient);",
                                    "        pm.expect(patient.count).to.equal(3);",
                                    "        pm.expect(Object.keys(patient.extension[0]).length).to.equal(2);",
                                    "        pm.expect(patient.extension[0].url).to.equal(\"https://dpc.cms.gov/checksum\");",
                                    "        pm.expect(patient.extension[0].valueString).to.exist;",
                                    "        pm.expect(Object.keys(patient.extension[1]).length).to.equal(2);",
                                    "        pm.expect(patient.extension[1].url).to.equal(\"https://dpc.cms.gov/file_length\");",
                                    "        pm.expect(patient.extension[1].valueDecimal).to.exist;",
                                    "        pm.environment.set(\"patient\", patient);",
                                    "        ",
                                    "        // EOB",
                                    "        var eob = pm.response.json().output.filter((elem) => elem.type == \"ExplanationOfBenefit\")[0]; ",
                                    "        console.log(\"eob: \", eob);",
                                    "        pm.expect(eob.count).to.be.above(100);",
                                    "        pm.expect(Object.keys(eob.extension[0]).length).to.equal(2);",
                                    "        pm.expect(eob.extension[0].url).to.equal(\"https://dpc.cms.gov/checksum\");",
                                    "        pm.expect(eob.extension[0].valueString).to.exist;",
                                    "        pm.expect(Object.keys(eob.extension[1]).length).to.equal(2);",
                                    "        pm.expect(eob.extension[1].url).to.equal(\"https://dpc.cms.gov/file_length\");",
                                    "        pm.expect(eob.extension[1].valueDecimal).to.exist;",
                                    "        pm.environment.set(\"eob\", eob);",
                                    "        ",
                                    "        // Coverage",
                                    "        var coverage = pm.response.json().output.filter((elem) => elem.type == \"Coverage\")[0]; ",
                                    "        pm.expect(coverage.count).to.equal(12);",
                                    "        pm.expect(Object.keys(coverage.extension[0]).length).to.equal(2);",
                                    "        pm.expect(coverage.extension[0].url).to.equal(\"https://dpc.cms.gov/checksum\");",
                                    "        pm.expect(coverage.extension[0].valueString).to.exist;",
                                    "        pm.expect(Object.keys(coverage.extension[1]).length).to.equal(2);",
                                    "        pm.expect(coverage.extension[1].url).to.equal(\"https://dpc.cms.gov/file_length\");",
                                    "        pm.expect(coverage.extension[1].valueDecimal).to.exist;",
                                    "        pm.environment.set(\"coverage\", coverage);",
									"    });",
									"} else {",
									"    // If response code is not 200, it should be 202. Assert that, and retry.",
									"    pm.test(\"Status code is 202\", function () {",
									"        pm.response.to.have.status(202);",
									"    });",
									"    postman.setNextRequest(\"Job response\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{content_location}}",
							"host": [
								"{{content_location}}"
							]
						},
						"description": "While the export request is being processed, the job url will return a 202 status. When it is completed, a 200 status will be returned, along with JSON containing the patient, explanation of benefits, and coverage data."
					},
                  "response": []
                },
                {
                  "name": "Patient data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3e50ce2a-4322-4723-981b-31251393b449",
                        "exec": [
                          "require('crypto-js')",
                          "",
                          "// Response should have FHIR Content-Type",
                          "pm.test(\"Content-type is application/fhir+ndjson\", function() {",
                          "   pm.response.to.have.header(\"Content-Type\", \"application/fhir+ndjson\"); ",
                          "});",
                          "",
                          "// There should be 2 patients.",
                          "pm.test(\"Patient data correct\", function() {",
                          "    var responseOutput = pm.response.text();",
                          "    var responseLines = responseOutput.trim().split('\\n');",
                          "    pm.expect(responseLines).to.have.lengthOf(3);",
                          "    for (var line of responseLines) {",
                          "        var lineData = JSON.parse(line);",
                          "        pm.expect(lineData.resourceType).to.equal(\"Patient\");",
                          "        var mbi = lineData.identifier.find(i => i.system === \"http://hl7.org/fhir/sid/us-mbi\");",
                          "        pm.expect(mbi).not.eq(undefined);",
                          "    }",
                          "});",
                          "",
                          "// Verify sha256 checksums",
                          "pm.test(\"Checksums should match\", function() {",
                          "    var output = pm.environment.get(\"patient\")",
                          "    var responseOutput = pm.response.text();",
                          "    ",
                          "    var checksum  = CryptoJS.SHA256(responseOutput);",
                          "    pm.expect(\"sha256:\" + checksum).to.equal(output.extension[0].valueString)",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "b848c339-0867-41c0-81e8-326e6da9e6d6",
                        "exec": [
                          "pm.environment.set(\"patient_url\", pm.environment.get(\"patient\").url)"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{patient_url}}",
                      "host": [
                        "{{patient_url}}"
                      ]
                    },
                    "description": "The patient data url comes from the response to the job in the previous request. It is in ndjson, which is a set of JSON responses, one per line. Each line contains the JSON data for one patient."
                  },
                  "response": []
                },
                {
                  "name": "Explanation of Benefit data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "64383543-afd0-4aed-8e62-533892909b98",
                        "exec": [
                          "// Response should have FHIR Content-Type",
                          "pm.test(\"Content-type is application/fhir+ndjson\", function() {",
                          "   pm.response.to.have.header(\"Content-Type\", \"application/fhir+ndjson\"); ",
                          "   pm.environment.set(\"file_timestamp\", pm.response.headers.get(\"Last-Modified\"))",
                          "});",
                          "",
                          "// There should be 86 Explanations of Benefits.",
                          "pm.test(\"Explanation of Benefits data correct\", function() {",
                          "    var responseOutput = pm.response.text();",
                          "    var responseLines = responseOutput.trim().split('\\n');",
                          "    pm.expect(responseLines.length).to.be.above(100);",
                          "    for (var line of responseLines) {",
                          "        var lineData = JSON.parse(line);",
                          "        pm.expect(lineData.resourceType).to.equal(\"ExplanationOfBenefit\");",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "61e1278d-0e11-4a4b-97b3-6118ac20a20f",
                        "exec": [
                          "pm.environment.set(\"eob_url\", pm.environment.get(\"eob\").url)"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{eob_url}}",
                      "host": [
                        "{{eob_url}}"
                      ]
                    },
                    "description": "The explanation of benefits data url comes from the response to the job in the previous request. It is in ndjson, which is a set of JSON responses, one per line. Each line contains the JSON data for one explanation of benefits."
                  },
                  "response": []
                },
                {
                  "name": "Coverage data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "756f4c51-bce2-4a77-b3b9-bd7e96d844e5",
                        "exec": [
                          "// Response should have FHIR Content-Type",
                          "pm.test(\"Content-type is application/fhir+ndjson\", function() {",
                          "   pm.response.to.have.header(\"Content-Type\", \"application/fhir+ndjson\"); ",
                          "});",
                          "",
                          "// There should be 8 coverage.",
                          "pm.test(\"Coverage data correct\", function() {",
                          "    var responseOutput = pm.response.text();",
                          "    var responseLines = responseOutput.trim().split('\\n');",
                          "    pm.expect(responseLines).to.have.lengthOf(12);",
                          "    for (var line of responseLines) {",
                          "        var lineData = JSON.parse(line);",
                          "        pm.expect(lineData.resourceType).to.equal(\"Coverage\");",
                          "    }",
                          "});",
                          "",
                          "// Verify sha256 checksum",
                          "pm.test(\"Checksum should match\", function() {",
                          "    var output = pm.environment.get(\"coverage\")",
                          "    var responseOutput = pm.response.text();",
                          "    ",
                          "    var checksum  = CryptoJS.SHA256(responseOutput);",
                          "    pm.expect(\"sha256:\" + checksum).to.equal(output.extension[0].valueString)",
                          "    ",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f30dd4c7-de1c-4d75-8119-24935c3e4959",
                        "exec": [
                          "pm.environment.set(\"coverage_url\", pm.environment.get(\"coverage\").url)"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{coverage_url}}",
                      "host": [
                        "{{coverage_url}}"
                      ]
                    },
                    "description": "The coverage data url comes from the response to the job in the previous request. It is in ndjson, which is a set of JSON responses, one per line. Each line contains the JSON data for one coverage."
                  },
                  "response": []
                },
                {
                  "name": "Request Partial Range",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c3140af-4f5d-493a-85b7-ec73dec7b750",
                        "exec": [
                          "// Response should have FHIR Content-Type",
                          "pm.test(\"Content-type is application/fhir+ndjson\", function() {",
                          "   pm.response.to.have.header(\"Content-Range\");",
                          "});",
                          "",
                          "// Should be 10kb total",
                          "pm.test('Should have 10kb of data', function() {",
                          "    pm.expect(pm.response.text().length).to.be.above(10000);",
                          "})",
                          "",
                          "pm.test('Content should be gzipped', function() {",
                          "    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Range",
                        "value": "bytes=0-10240",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{eob_url}}",
                      "host": [
                        "{{eob_url}}"
                      ]
                    },
                    "description": "Request a subset of the EOB data to ensure range requests work correctly."
                  },
                  "response": []
                },
                {
                  "name": "Request Modified Since",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c3140af-4f5d-493a-85b7-ec73dec7b750",
                        "exec": [
                          "// Response should be 304",
                          "pm.test('Response should be not-modified', function() {",
                          "    pm.response.to.have.status(304);",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "If-Modified-Since",
                        "type": "text",
                        "value": "{{file_timestamp}}"
                      }
                    ],
                    "url": {
                      "raw": "{{eob_url}}",
                      "host": [
                        "{{eob_url}}"
                      ],
                      "query": [
                        {
                          "key": "",
                          "value": "",
                          "disabled": true
                        }
                      ]
                    },
                    "description": "Request a subset of the EOB data to ensure range requests work correctly."
                  },
                  "response": []
                },
                {
                  "name": "Try export with _since",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5497fa12-aefd-44c2-9254-2beb51c52e31",
                        "exec": [
                          "// Status should be 202",
                          "pm.test(\"Status is 202\", function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "",
                          "// Url for job response should be in content-location header.",
                          "pm.test(\"Content-Location header is present\", function () {",
                          "    pm.response.to.have.header(\"Content-Location\");",
                          "});",
                          "",
                          "if (pm.response.headers.get(\"Content-Location\")) {",
                          "  pm.environment.set(\"since_content_location\", pm.response.headers.get(\"Content-Location\"));",
                          "} else {",
                          "  // Fail the test, no content location.",
                          "  postman.setNextRequest(null);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "8b8d6363-b490-428a-bfee-663b184ae05d",
                        "exec": [
                          "console.log(\"Group:\", pm.environment.get(\"attribution_group\"));",
                          "pm.environment.set(\"since_timestamp\", new Date().toISOString());"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{attribution_group_id}}/$export?_since={{since_timestamp}}",
                      "protocol": "http",
                      "host": [
                        "{{hostname}}"
                      ],
                      "port": "{{api_port}}",
                      "path": [
                        "v1",
                        "Group",
                        "{{attribution_group_id}}",
                        "$export"
                      ],
                      "query": [
                        {
                          "key": "_since",
                          "value": "{{since_timestamp}}"
                        }
                      ]
                    },
                    "description": "Try the export request again with the _since parameter of the current time. The resultant job should be empty. The request should succeed with a 202 status and the location for the job response in the `content-location` header."
                  },
                  "response": []
                },
                {
                  "name": "_since job response",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "28fe7a36-50ab-4e7d-bf21-312b5f5777f3",
                        "exec": [
                          "// Wait between pings",
                          "setTimeout(function() {}, 1000);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "70688a82-d0cf-4802-b1e5-b6ad7357c926",
                        "exec": [
                          "if (pm.response.code == 200) {",
                          "    // Response should have FHIR Content-Type",
                          "    pm.test(\"Content-type is application/json\", function() {",
                          "       pm.response.to.have.header(\"Content-Type\", \"application/json\"); ",
                          "    });",
                          "    ",
                          "    // If response code is 200, check the response and load the urls.",
                          "    pm.test(\"Empty output and no errors\", function() {",
                          "        pm.expect(pm.response.json().error).to.have.lengthOf(0);",
                          "        pm.expect(pm.response.json().output).to.have.lengthOf(0);",
                          "    });",
                          "} else {",
                          "    // If response code is not 200, it should be 202. Assert that, and retry.",
                          "    pm.test(\"Status code is 202\", function () {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "    postman.setNextRequest(\"_since job response\");",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{since_content_location}}",
                      "host": [
                        "{{since_content_location}}"
                      ]
                    },
                    "description": "While the export request is being processed, the job url will return a 202 status. When it is completed, a 200 status will be returned, along with JSON containing Job status."
                  },
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},


		{
			"name": "Updating",
			"item": [
				{
					"name": "Check update invalid content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96f38c80-8b9d-4761-b66c-a02bd1de7408",
								"exec": [
									"pm.test(\"Status is 415\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"pm.test(\"Body matches expected response\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.issue).to.have.length(1)",
									"    pm.expect(respJson.issue[0].details.text).to.be.equal(\"`Content-Type:` header must specify valid FHIR content type\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/fire+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Organization\",\n    \"id\": \"46ac7ad6-7487-4dd0-baa0-6e2c8cae76a0\",\n    \"identifier\": [\n        {\n            \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n            \"value\": \"46ac7ad6-7487-4dd0-baa0-6e2c8cae76a0\"\n        }\n    ],\n    \"name\": \"Beth Israel Deaconess HealthCare - Chestnut Hill\",\n    \"address\": [\n        {\n            \"use\": \"work\",\n            \"type\": \"both\",\n            \"line\": [\n                \"200 Boylston Street, 4th Floor\"\n            ],\n            \"city\": \"Chestnut Hill\",\n            \"state\": \"MA\",\n            \"postalCode\": \"02467\",\n            \"country\": \"US\"\n        }\n    ],\n    \"endpoint\": [\n        {\n            \"reference\": \"Endpoint/0a60c95c-48b4-4f39-8bf4-09f7dfe2e3cc\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Organization/{{organization_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Organization",
								"{{organization_id}}"
							]
						},
						"description": "Attempt to update the organization value, but via an incorrect Content-Type header"
					},
					"response": []
				},
				{
					"name": "Update organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96f38c80-8b9d-4761-b66c-a02bd1de7408",
								"exec": [
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body matches expected response\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.name).equals(\"Beth Israel Deaconess HealthCare - Chestnut Hill\");",
									"    ",
									"    var address = respJson.address[0];",
									"    pm.expect(address.line[0]).equals(\"200 Boylston Street, 4th Floor\");",
									"    pm.expect(address.city).equals(\"Chestnut Hill\");",
									"    pm.expect(address.state).equals(\"MA\");",
									"    pm.expect(address.postalCode).equals(\"02467\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceType\": \"Organization\",\n    \"id\": \"46ac7ad6-7487-4dd0-baa0-6e2c8cae76a0\",\n    \"identifier\": [\n        {\n            \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n            \"value\": \"1121111110\"\n        }\n    ],\n    \"name\": \"Beth Israel Deaconess HealthCare - Chestnut Hill\",\n    \"address\": [\n        {\n            \"use\": \"work\",\n            \"type\": \"both\",\n            \"line\": [\n                \"200 Boylston Street, 4th Floor\"\n            ],\n            \"city\": \"Chestnut Hill\",\n            \"state\": \"MA\",\n            \"postalCode\": \"02467\",\n            \"country\": \"US\"\n        }\n    ],\n    \"endpoint\": [\n        {\n            \"reference\": \"Endpoint/0a60c95c-48b4-4f39-8bf4-09f7dfe2e3cc\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Organization/{{organization_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Organization",
								"{{organization_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b30d587b-5747-4b41-9325-0a868e56210a",
								"exec": [
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Body matches expected response\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.name).equals(\"Test Organization Endpoint Update\");",
									"    pm.expect(respJson.status).equals(\"test\");",
									"    pm.expect(respJson.address).equals(\"http://www.example.com/endpoint\");",
									"    pm.expect(respJson.connectionType.system).equals(\"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\");",
									"    pm.expect(respJson.connectionType.code).equals(\"hl7-fhir-rest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/fhir+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"resourceType\": \"Endpoint\",\n\t\"status\": \"test\",\n\t\"connectionType\": {\n\t\t\"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\",\n\t\t\"code\": \"hl7-fhir-rest\"\n\t},\n\t\"name\": \"Test Organization Endpoint Update\",\n\t\"address\": \"http://www.example.com/endpoint\",\n\t\"managingOrganization\": {\n\t\t\"reference\": \"Organization/{{organization_id}}\"\n\t},\n\t\"payloadType\": [\n\t\t{\n\t\t\t\"coding\": {\n\t\t\t\t\"code\": \"test\",\n\t\t\t\t\"system\": \"http://www.example.com/test\"\n\t\t\t}\n\t\t}\n\t]\n}\n    "
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Endpoint/{{endpoint_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Endpoint",
								"{{endpoint_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update endpoint with invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b30d587b-5747-4b41-9325-0a868e56210a",
								"exec": [
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Body matches expected response\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.resourceType).equals(\"OperationOutcome\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/fhir+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"resourceType\": \"Endpoint\",\n\t\"status\": \"abcdef\",\n\t\"connectionType\": {\n\t\t\"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\",\n\t\t\"code\": \"hl7-fhir-rest\"\n\t},\n\t\"name\": \"Test Organization Endpoint Update\",\n\t\"address\": \"http://www.example.com/endpoint\",\n\t\"managingOrganization\": {\n\t\t\"reference\": \"Organization/{{organization_id}}\"\n\t},\n\t\"payloadType\": [\n\t\t{\n\t\t\t\"coding\": {\n\t\t\t\t\"code\": \"test\",\n\t\t\t\t\"system\": \"http://www.example.com/test\"\n\t\t\t}\n\t\t}\n\t]\n}\n    "
						},
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Endpoint/{{endpoint_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Endpoint",
								"{{endpoint_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update consent record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afc8f4d8-cc70-4aeb-8119-786551e1ada9",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should contain submitted values\", function() {",
									"    var respJson = pm.response.json();",
									"    pm.expect(respJson.resourceType).to.equal(\"Consent\")",
									"    pm.expect(respJson.text.div).contains(\"OPTIN\");",
									"    pm.expect(respJson.policyRule).to.equal(\"http://hl7.org/fhir/ConsentPolicy/opt-in\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/fhir+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"resourceType\": \"Consent\",\n\t\"status\": \"active\",\n\t\"category\": [{\n\t\t\"coding\": [{\n\t\t\t\"system\": \"http://loinc.org\",\n\t\t\t\"code\": \"64292-6\"\n\t\t}]\n\t}],\n\t\"patient\": {\n\t\t\"reference\": \"http://api.url/Patient?identity=|0OO0OO0OO00\"\n\t},\n\t\"organization\": {\n\t\t\"reference\": \"{{organization_id}}\"\n\t},\n\t\"policyRule\": \"http://hl7.org/fhir/ConsentPolicy/opt-in\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{consent_port}}/v1/Consent/{{consent_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{consent_port}}",
							"path": [
								"v1",
								"Consent",
								"{{consent_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deletion",
			"item": [
				{
					"name": "Find Practitioner by NPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788bc2c3-ccf4-44cc-bd6b-1874ecfb26dc",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Bundle should have a single entry\", function() {",
									"    var response = pm.response.json();",
									"",
									"    // Should be a search set with 1 entry",
									"    pm.expect(response.type).to.equal(\"searchset\")",
									"    pm.expect(response.total).to.equal(1);",
									"",
									"    pm.globals.set(\"single_practitioner_id\", response.entry[0].resource.id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Practitioner?identifier=2459425221",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Practitioner"
							],
							"query": [
								{
									"key": "identifier",
									"value": "2459425221"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete patient",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/{{single_patient_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"{{single_patient_id}}"
							]
						},
						"description": "Ensure we can successfully remove patients."
					},
					"response": []
				},
				{
					"name": "Patient should be missing from group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c5751fb-9adb-49fb-9c24-a094f48c4396",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response should have FHIR Content-Type",
									"pm.test(\"Content-type is application/fhir+json\", function() {",
									"   pm.response.to.have.header(\"Content-Type\", \"application/fhir+json\"); ",
									"});",
									"",
									"pm.test(\"Response Body is correct\", () => {",
									"    console.log(\"Body correct?\");",
									"    const patient_id = pm.globals.get(\"single_patient_id\")",
									"    // Check to ensure that each member id matches what we previously had",
									"    var response = pm.response.json();",
									"    ",
									"    // Ensure that the Patient IDs is less than the original submission number",
									"    pm.expect(response.member.length).to.equal(4);",
									"    var ids = new Set(JSON.parse(pm.globals.get(\"patient_ids\")));",
									"    const matchingPatient = response.member.filter(member => {",
									"        pm.expect(ids.has(member.entity.reference)).to.be.true;",
									"        return member.entity.referenced === patient_id",
									"    });",
									"    pm.expect(matchingPatient).to.be.empty;",
									"",
									"    pm.globals.set(\"attribution_group_id\", response.id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group/{{attribution_group_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group",
								"{{attribution_group_id}}"
							]
						},
						"description": "Ensure that when we remove a patient, the corresponding attribution values are removed as well."
					},
					"response": []
				},
				{
					"name": "Delete Practitioner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9c75e9e-6c5d-4566-b2ee-cd7a3ab08b1c",
								"exec": [
									"// Status should be 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Practitioner/{{single_practitioner_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Practitioner",
								"{{single_practitioner_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider group should be missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cea56747-f597-4f44-a387-d097e2a3e396",
								"exec": [
									"pm.test(\"Bundle should be empty\", function() {",
									"    var response = pm.response.json();",
									"",
									"    // Should be a search set with 0 entries",
									"    pm.expect(response.type).to.equal(\"searchset\")",
									"    pm.expect(response.total).to.equal(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Group?characteristic-value=attributed-to$2459425221",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Group"
							],
							"query": [
								{
									"key": "characteristic-value",
									"value": "attributed-to$2459425221"
								}
							]
						},
						"description": "When a provider is deleted their patient roster is removed as well."
					},
					"response": []
				},
				{
					"name": "Delete endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b30d587b-5747-4b41-9325-0a868e56210a",
								"exec": [
									"pm.test(\"Status is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/fhir+json"
							}
						],
						"url": {
							"raw": "http://{{hostname}}:{{api_port}}/v1/Endpoint/{{endpoint_id}}",
							"protocol": "http",
							"host": [
								"{{hostname}}"
							],
							"port": "{{api_port}}",
							"path": [
								"v1",
								"Endpoint",
								"{{endpoint_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test that we can remove various resource and that everything cleans up appropriately.",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cbabc0f8-0317-4c30-b807-e833cdf27b5a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "01e9364c-b13b-4771-802b-6d88a89c1895",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "07881292-1de2-4918-86c0-5de1906dedb8",
			"key": "PROVIDER_ID",
			"value": "8D80925A-027E-43DD-8AED-9A501CC4CD91",
			"type": "string"
		},
		{
			"id": "7717ba57-46d8-486e-a5d7-da8237c900a2",
			"key": "hostname",
			"value": "localhost",
			"type": "string"
		},
		{
			"id": "beeb67a8-91ae-4b41-8ef6-6fb16399eee5",
			"key": "api_port",
			"value": "3002",
			"type": "string"
		},
		{
			"id": "770b174b-c2c4-439b-babf-d9ec7155dbdb",
			"key": "attribution_port",
			"value": "3500",
			"type": "string"
		},
		{
			"id": "6ef027ab-07ee-4c2a-8c8a-45d4ff6540d3",
			"key": "consent_port",
			"value": "3600",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}