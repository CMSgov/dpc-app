{
	"info": {
		"_postman_id": "46f1266f-6a54-4a33-9d31-3ea944875a35",
		"name": "EndToEndRequestTest",
		"description": "This automates EndToEndRequestTest in postman.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First export operation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f936145-db10-4d73-95c6-1b8b94b5a387",
						"exec": [
							"// Status should be 404",
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"// Response body should include:",
							"// The resourceType \"OperationOutcome\"",
							"// A single issue, severity fatal",
							"pm.test(\"Response body has correct error information\", function() {",
							"    pm.expect(pm.response.json().resourceType).to.equal(\"OperationOutcome\");",
							"    pm.expect(pm.response.json().issue).to.have.lengthOf(1);",
							"    pm.expect(pm.response.json().issue[0].severity).to.equal(\"fatal\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3002/v1/Group/{{PROVIDER_ID}}/$export",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"v1",
						"Group",
						"{{PROVIDER_ID}}",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit roster",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72634c6f-4d6b-49b9-b4db-b172af0f04f1",
						"exec": [
							"// Status should be 200",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/fhir+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": "../main/resources/attribution_bundle.json"
					}
				},
				"url": {
					"raw": "http://localhost:3500/v1/Group/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3500",
					"path": [
						"v1",
						"Group",
						""
					]
				},
				"description": "Submit the roster for the provider."
			},
			"response": []
		},
		{
			"name": "Second export operation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5497fa12-aefd-44c2-9254-2beb51c52e31",
						"exec": [
							"// Status should be 204",
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Url for job response should be in content-location header.",
							"pm.test(\"Content-Location header is present\", function () {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"content_location\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "http://localhost:3002/v1/Group/{{PROVIDER_ID}}/$export",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"v1",
						"Group",
						"{{PROVIDER_ID}}",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Job response",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "28fe7a36-50ab-4e7d-bf21-312b5f5777f3",
						"exec": [
							"// Wait between pings",
							"setTimeout(function() {}, 60000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "70688a82-d0cf-4802-b1e5-b6ad7357c926",
						"exec": [
							"if (pm.response.code == 200) {",
							"    // If response code is 200, check the response and load the urls.",
							"    pm.test(\"Patient, EOB, and Coverage in response but no errors\", function() {",
							"        pm.expect(pm.response.json().error).to.have.lengthOf(0);",
							"        pm.expect(pm.response.json().output).to.have.lengthOf(3);",
							"        pm.expect(pm.response.json().output[0].type).to.equal(\"Patient\");",
							"        pm.expect(pm.response.json().output[0].count).to.equal(100);",
							"        pm.environment.set(\"patient_url\", pm.response.json().output[0].url);",
							"        pm.expect(pm.response.json().output[1].type).to.equal(\"ExplanationOfBenefit\");",
							"        pm.expect(pm.response.json().output[1].count).to.equal(3154);",
							"        pm.environment.set(\"eob_url\", pm.response.json().output[1].url);",
							"        pm.expect(pm.response.json().output[2].type).to.equal(\"Coverage\");",
							"        pm.expect(pm.response.json().output[2].count).to.equal(400);",
							"        pm.environment.set(\"coverage_url\", pm.response.json().output[2].url);",
							"    })",
							"} else {",
							"    // If response code is not 200, it should be 202. Assert that, and retry.",
							"    pm.test(\"Status code is 202\", function () {",
							"        pm.response.to.have.status(202);",
							"    });",
							"    postman.setNextRequest(\"Job response\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{content_location}}",
					"host": [
						"{{content_location}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patient data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e50ce2a-4322-4723-981b-31251393b449",
						"exec": [
							"// There should be 100 patients.",
							"pm.test(\"Patient data correct\", function() {",
							"    var responseOutput = pm.response.text();",
							"    var responseLines = responseOutput.trim().split('\\n');",
							"    pm.expect(responseLines).to.have.lengthOf(100);",
							"    for (var line of responseLines) {",
							"        var lineData = JSON.parse(line);",
							"        pm.expect(lineData.resourceType).to.equal(\"Patient\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patient_url}}",
					"host": [
						"{{patient_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Explanation of Benefit data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64383543-afd0-4aed-8e62-533892909b98",
						"exec": [
							"// There should be 3154 eobs.",
							"pm.test(\"Explanation of Benefits data correct\", function() {",
							"    var responseOutput = pm.response.text();",
							"    var responseLines = responseOutput.trim().split('\\n');",
							"    pm.expect(responseLines).to.have.lengthOf(3154);",
							"    for (var line of responseLines) {",
							"        var lineData = JSON.parse(line);",
							"        pm.expect(lineData.resourceType).to.equal(\"ExplanationOfBenefit\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eob_url}}",
					"host": [
						"{{eob_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Coverage data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "756f4c51-bce2-4a77-b3b9-bd7e96d844e5",
						"exec": [
							"// There should be 400 coverage.",
							"pm.test(\"Coverage data correct\", function() {",
							"    var responseOutput = pm.response.text();",
							"    var responseLines = responseOutput.trim().split('\\n');",
							"    pm.expect(responseLines).to.have.lengthOf(400);",
							"    for (var line of responseLines) {",
							"        var lineData = JSON.parse(line);",
							"        pm.expect(lineData.resourceType).to.equal(\"Coverage\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coverage_url}}",
					"host": [
						"{{coverage_url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ed50ef5a-13ec-4e4b-a393-9ac0a1f641e3",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"PROVIDER_ID\", \"8D80925A-027E-43DD-8AED-9A501CC4CD91\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2711e719-0bd7-4948-b433-d36c7dead2b4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}