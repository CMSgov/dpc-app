volumes:
  coverage:

services:

  redis:
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped
      
  dpc_web:
    build:
      context: .
      dockerfile: dpc-web/Dockerfile
    image: dpc-web:latest
    volumes:
      - "./dpc-web/certs:/dpc-web/certs"
      - "./dpc-web/coverage:/dpc-web/coverage"
      - ./tmp/letter_opener/web:/dpc-web/tmp/letter_opener
      - "./dpc-web/Gemfile.lock:/dpc-web/Gemfile.lock"
      - "./dpc-web/app:/dpc-web/app"
      - "./dpc-web/spec:/dpc-web/spec"
    environment:
      - REDIS_URL=redis://redis
      - DATABASE_URL=postgresql://db/dpc-website_development
      - TEST_DATABASE_URL=postgresql://db/dpc-website_test
      - API_METADATA_URL=http://api:3002/v1
      - API_ADMIN_URL=http://api:9900
      - GOLDEN_MACAROON=${GOLDEN_MACAROON:-}
      - DB_USER=postgres
      - DB_PASS=dpc-safe
      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true
      - DPC_CA_CERT=${DPC_CA_CERT:-}
      - RUBY_YJIT_ENABLE=1
      - DISABLE_JSON_LOGGER=true
      - NEW_RELIC_AGENT_ENABLED=${NEW_RELIC_AGENT_ENABLED:-true}
      - WEB_SVC_PORT=3500
    ports:
      - "3900:3500"
    depends_on:
      web_sidekiq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "[ \"$(echo $( wget -q http://127.0.0.1:$$WEB_SVC_PORT/health_check -O- ))\" == \"success\" ]"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped

  web_sidekiq:
    volumes:
      - ./tmp/letter_opener/web:/dpc-web/tmp/letter_opener
    build:
      context: .
      dockerfile: dpc-web/Dockerfile
    command: sidekiq
    image: dpc-web:latest
    environment:
      - REDIS_URL=redis://redis
      - DATABASE_URL=postgresql://db/dpc-website_development
      - TEST_DATABASE_URL=postgresql://db/dpc-website_test
      - API_METADATA_URL=http://api:3002/v1
      - API_ADMIN_URL=http://api:9900
      - GOLDEN_MACAROON=${GOLDEN_MACAROON:-}
      - DB_USER=postgres
      - DB_PASS=dpc-safe
      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true
      - DPC_CA_CERT=${DPC_CA_CERT:-}
      - RUBY_YJIT_ENABLE=1
      - DISABLE_JSON_LOGGER=true
      - NEW_RELIC_AGENT_ENABLED=${NEW_RELIC_AGENT_ENABLED:-true}
      - SIDEKIQ_SVC_PORT=7433
    healthcheck:
      test: ["CMD-SHELL", "[[  $(wget -q http://127.0.0.1:$$SIDEKIQ_SVC_PORT -O-) == \"Alive!\" ]]"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true

  dpc_admin:
    build:
      context: .
      dockerfile: dpc-admin/Dockerfile
    image: dpc-web-admin:latest
    volumes:
      - "./dpc-admin/coverage:/dpc-admin/coverage"
      - ./tmp/letter_opener/admin:/dpc-admin/tmp/letter_opener
      - "./dpc-admin/Gemfile.lock:/dpc-admin/Gemfile.lock"
    environment:
      - REDIS_URL=redis://redis
      - GOLDEN_MACAROON=${GOLDEN_MACAROON:-}
      - API_METADATA_URL=http://api:3002/v1
      - API_ADMIN_URL=http://api:9900
      - DATABASE_URL=postgresql://db/dpc-website_development
      - TEST_DATABASE_URL=postgresql://db/dpc-website_test
      - DB_USER=postgres
      - DB_PASS=dpc-safe
      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true
      - RUBY_YJIT_ENABLE=1
      - DISABLE_JSON_LOGGER=true
      - ADMIN_SVC_PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      admin_sidekiq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "[ \"$(wget -q http://127.0.0.1:$$ADMIN_SVC_PORT/admin/health_check -O- )\" == \"success\" ]"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped

  admin_sidekiq:
    volumes:
      - ./tmp/letter_opener/admin:/dpc-admin/tmp/letter_opener
    build:
      context: .
      dockerfile: dpc-admin/Dockerfile
    command: sidekiq
    image: dpc-web-admin:latest
    environment:
      - REDIS_URL=redis://redis
      - GOLDEN_MACAROON=${GOLDEN_MACAROON:-}
      - API_METADATA_URL=http://api:3002/v1
      - API_ADMIN_URL=http://api:9900
      - DATABASE_URL=postgresql://db/dpc-website_development
      - TEST_DATABASE_URL=postgresql://db/dpc-website_test
      - DB_USER=postgres
      - DB_PASS=dpc-safe
      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true
      - RUBY_YJIT_ENABLE=1
      - DISABLE_JSON_LOGGER=true
      - SIDEKIQ_SVC_PORT=7434
    healthcheck:
      test: ["CMD-SHELL", "[[  $(wget -q http://127.0.0.1:$$SIDEKIQ_SVC_PORT -O-) == \"Alive!\" ]]"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true

  dpc_portal:
    build:
      context: .
      dockerfile: dpc-portal/Dockerfile
    image: dpc-web-portal:latest
    volumes:
      # Mount specific directories to avoid overwriting 
      # precompiled assets (public/assets/) and node_modules
      - "./dpc-portal/app:/dpc-portal/app"
      - "./dpc-portal/db:/dpc-portal/db"
      - "./dpc-portal/lib:/dpc-portal/lib"
      - "./dpc-portal/log:/dpc-portal/log"
      - "./dpc-portal/bin:/dpc-portal/bin"
      - "./dpc-portal/config:/dpc-portal/config"
      - "./dpc-portal/config.ru:/dpc-portal/config.ru"
      - "./dpc-portal/spec:/dpc-portal/spec"

      # Mount dependency files
      - "./dpc-portal/package.json:/dpc-portal/package.json"
      - "./dpc-portal/package-lock.json:/dpc-portal/package-lock.json"
      - "./dpc-portal/Gemfile:/dpc-portal/Gemfile"
      - "./dpc-portal/Gemfile.lock:/dpc-portal/Gemfile.lock"

      # Mount coverage and utility files
      - "./dpc-portal/coverage:/dpc-portal/coverage"
      - ./tmp/letter_opener/portal:/dpc-portal/tmp/letter_opener
    env_file:
      - ./ops/config/decrypted/local.env
    environment:
      # Misc. non-application settings
      - TERM=${TERM:-xterm-256color}
      - 'PS1=${DOCKER_PS1:-[docker] \w: }'
      - "LSCOLORS=${DOCKER_LSCOLORS:- }"
      # Application settings
      - REDIS_URL=redis://redis
      - DATABASE_URL=postgresql://db/dpc-portal_development
      - TEST_DATABASE_URL=postgresql://db/dpc-portal_test
      - GOLDEN_MACAROON=${GOLDEN_MACAROON:-}
      - API_METADATA_URL=http://api:3002/v1
      - API_ADMIN_URL=http://api:9900
      - DB_USER=postgres
      - DB_PASS=dpc-safe
      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true
      - CPI_API_GW_BASE_URL=http://localhost:4567/
      - CMS_IDM_OAUTH_URL=http://localhost:4567/
      - IDP_HOST=idp.int.identitysandbox.gov
      - RUBY_YJIT_ENABLE=1
      - ENV=local
      - NEW_RELIC_MONITOR_MODE=false
      - DISABLE_JSON_LOGGER=true
      - PORTAL_SVC_PORT=3100
    ports:
      - "3100:3100"
    depends_on:
      portal_sidekiq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "[[  $(wget -q http://127.0.0.1:$$PORTAL_SVC_PORT/portal/health_check -O-) == \"success\" ]]"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped

  portal_sidekiq:
    volumes:
      - ./tmp/letter_opener/portal:/dpc-portal/tmp/letter_opener
      - "./dpc-portal/app:/dpc-portal/app"
    build:
      context: .
      dockerfile: dpc-portal/Dockerfile
    command: sidekiq
    image: dpc-web-portal:latest
    environment:
      - REDIS_URL=redis://redis
      - DATABASE_URL=postgresql://db/dpc-portal_development
      - DB_USER=postgres
      - DB_PASS=dpc-safe
      - GOLDEN_MACAROON=${GOLDEN_MACAROON:-}
      - API_ADMIN_URL=http://api:9900
      - API_METADATA_URL=http://api:3002/v1
      - CPI_API_GW_BASE_URL=http://localhost:4567/
      - CMS_IDM_OAUTH_URL=http://localhost:4567/
      - IDP_HOST=idp.int.identitysandbox.gov
      - RUBY_YJIT_ENABLE=1
      - ENV=local
      - DISABLE_JSON_LOGGER=true
      - SIDEKIQ_SVC_PORT=7435
    healthcheck:
      test: ["CMD-SHELL", "[[  $(wget -q http://127.0.0.1:$$SIDEKIQ_SVC_PORT -O-) == \"Alive!\" ]]"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 10s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true
