{
	"info": {
		"_postman_id": "5ce60d69-95c3-4221-8bd3-d71ac6017527",
		"name": "DPC V2 Smoke Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Created organization should have a uuid (id field)\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.not.empty",
							"    pm.environment.set(\"organization_id\",jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Org",
						"value": "org123",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resourceType\": \"Organization\",\n  \"identifier\": [\n    {\n      \"use\": \"official\",\n      \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n      \"value\": \"0d6094e{{$randomInt}}\"\n    },\n    {\n      \"use\": \"usual\",\n      \"system\": \"urn:oid:2.16.840.1.113883.2.4.6.1\",\n      \"value\": \"17-0112278\"\n    }\n  ],\n  \"type\": [\n    {\n      \"coding\": [\n        {\n          \"system\": \"urn:oid:2.16.840.1.113883.2.4.15.1060\",\n          \"code\": \"V6\",\n          \"display\": \"University Medical Hospital\"\n        },\n        {\n          \"system\": \"http://terminology.hl7.org/CodeSystem/organization-type\",\n          \"code\": \"prov\",\n          \"display\": \"Healthcare Provider\"\n        }\n      ]\n    }\n  ],\n  \"name\": \"Burgers University Medical Center\",\n  \"telecom\": [\n    {\n      \"system\": \"phone\",\n      \"value\": \"022-655 2300\",\n      \"use\": \"work\"\n    }\n  ],\n  \"address\": [\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"Galapagosweg 91\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9105 PZ\",\n      \"country\": \"NLD\"\n    },\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"PO Box 2311\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9100 AA\",\n      \"country\": \"NLD\"\n    }\n  ],\n  \"contact\": [\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PRESS\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2334\"\n        }\n      ]\n    },\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PATINF\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2335\"\n        }\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_admin_base_url}}/Organization/",
					"host": [
						"{{api_admin_base_url}}"
					],
					"path": [
						"Organization",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Implementer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Contains a valid implementer resource in response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.not.be.empty",
							"    pm.expect(jsonData.name).to.be.equal(\"Smoke Test Implementer\")",
							"    pm.expect(jsonData.ssas_group_id).to.not.be.empty",
							"    pm.expect(jsonData.created_at).to.not.be.empty",
							"    pm.expect(jsonData.updated_at).to.not.be.empty",
							"    pm.expect(jsonData.deleted_at.Valid).to.be.equal(false)",
							"",
							"    //Set enviroment variables. To be used in subsequent tests.",
							"    pm.environment.set(\"implementer_id\", jsonData.id);",
							"    pm.environment.set(\"ssas_group_id\", jsonData.ssas_group_id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Org",
						"value": "jdfadf",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"Smoke Test Implementer\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_admin_base_url}}/Implementer",
					"host": [
						"{{api_admin_base_url}}"
					],
					"path": [
						"Implementer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Implementer Org",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Contains Org Id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.org_id).to.not.be.empty",
							"    pm.environment.set(\"organization_id\", jsonData.org_id)",
							"});",
							"",
							"pm.test(\"Contains correct Implementer Id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.implementer_id).to.be.equal(pm.environment.get(\"implementer_id\"))",
							"});",
							"",
							"pm.test(\"Contains Active status\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.be.equal(\"Active\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"npi\", \"442545\"+Math.floor(Math.random() * 10000));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Org",
						"value": "jdfadf",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"npi\":\"{{npi}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_admin_base_url}}/Implementer/{{implementer_id}}/org",
					"host": [
						"{{api_admin_base_url}}"
					],
					"path": [
						"Implementer",
						"{{implementer_id}}",
						"org"
					]
				},
				"description": "Assign an organization to an implementer using the npi of an organization that is not yet in our system. The org should get created automatically."
			},
			"response": []
		},
		{
			"name": "Create System",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains client_id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.client_id).to.be.not.empty;",
							"});",
							"",
							"pm.test(\"Response contains correct client_name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.client_name).to.eql(\"Functional Tests System\");",
							"});",
							"",
							"pm.test(\"Response contains correct IP\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ips[0]).to.eql(\"75.27.241.103\");",
							"});",
							"",
							"pm.test(\"Response conains client_token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.client_token).to.not.be.empty;",
							"    pm.environment.set(\"client_token\", jsonData.client_token)",
							"});",
							"",
							"pm.test(\"Response contains expires_at\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.expires_at).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response contains public_key_id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.public_key_id).to.not.be.empty;",
							"    pm.environment.set(\"public_key_id\", jsonData.public_key_id)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Org",
						"type": "text",
						"value": "jdfadf"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"client_name\": \"Functional Tests System\",\n  \"signature\": \"p0A0r7kF/gImxXH804xXDgvdDMDb+Kv+agcdJs8pbMe+JJs4FP+2Jhe8lqazgpce\\nNxqps4ciNW9EVz0tBkMDOTn9Eo+8FSNG47Q7ii6M/oaxPwf751Ulp6VuO3GVs0Me\\n7Nwdxpy3CupaB5rG0N+dl/YOkuddlYpzDGVlnTdqMuFslY1abqownwYrVsVjJUzD\\nfy1D7GapkJtgg1Lv8sCCih8UtSXnTvbYBDQs9xVJuG2RjcRT5cE+ysBaNg3ZGW2p\\nV2wZY2O2YrYAwbqJHKQwatpEA7JEL/Q6maM4hTJn9JmFRVV/2g52yxhfRutxVgHD\\nal5OtjFSgTf+suezWzXg4vlVPPbe5yxEImeaZ5hYbnXnUmPfcnk4HMIE52BSYNA3\\nuFPDUPSMywxtjCK2O5UW3n8uLZVXucWZFyKuoCB6rSUqKUlH+KzPMUE+nAVIMm++\\nihVjwHjY48moXASYxv5pe3CXfXQt79RYhuTttYL7TWS6V9qH1gYLQiTLDZY55468\\n/iumRb5m/q9y5htyQx2bkihIx+oXOfaw9IttsTtfx9K5dwt4IFnx4RVF3+K1mkhh\\nBETBU66mUcoGrilcKhs8cAFW5xqEi+hvDVxVu+BpQoH8V54GvTArULovTF2PepPm\\nBE724lT/XJH+Z31dEriel6XGKW/vlUBq2JuSb3dXkFk=\",\n  \"ips\": [\n    \"75.27.241.103\"\n  ],\n  \"public_key\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_admin_base_url}}/Implementer/{{implementer_id}}/Org/{{organization_id}}/system",
					"host": [
						"{{api_admin_base_url}}"
					],
					"path": [
						"Implementer",
						"{{implementer_id}}",
						"Org",
						"{{organization_id}}",
						"system"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"access_token\": { \"type\": \"string\" },",
							"        \"token_type\": { \"type\": \"string\" },",
							"        \"expires_in\": { \"type\": \"string\", \"format\": \"time\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"token_type has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"token_type\", \"bearer\")",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"var respJson = pm.response.json();",
							"pm.environment.set(\"access_token\", respJson.access_token);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var navigator = {}; //fake a navigator object for the lib",
							"var window = {}; //fake a window object for the lib);",
							"eval(postman.getEnvironmentVariable(\"jsrsasign\")); //import jsrsasign lib",
							"pm.environment.unset(\"variable_key\");",
							"var dt = new Date().getTime();",
							"var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
							"    var r = (dt + Math.random() * 16) % 16 | 0;",
							"    dt = Math.floor(dt / 16);",
							"    return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
							"}); ",
							"var data = {",
							"    \"iss\": postman.getEnvironmentVariable(\"client_token\"),",
							"    \"sub\": postman.getEnvironmentVariable(\"client_token\"),",
							"    \"aud\": \"http://localhost:3000/api/v2/Token/auth\",",
							"    \"exp\": Math.round(new Date().getTime() / 1000) + 200,",
							"    \"iat\": Math.round(new Date().getTime() / 1000),",
							"    \"jti\": uuid,",
							"};",
							"console.log(data.aud)",
							"var secret = postman.getEnvironmentVariable(\"private_key\");",
							"const header = {",
							"    'alg': 'RS384',",
							"    'kid': postman.getEnvironmentVariable(\"public_key_id\"),",
							"}",
							"var sPayload = JSON.stringify(data);",
							"var sJWT = KJUR.jws.JWS.sign(\"RS384\", header, sPayload, secret);",
							"postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true,
					"accept-encoding": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "system/*.*",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{jwt_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_public_base_url}}/Token/auth",
					"host": [
						"{{api_public_base_url}}"
					],
					"path": [
						"Token",
						"auth"
					]
				},
				"description": "Verify a username and password"
			},
			"response": []
		},
		{
			"name": "Create Group",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');",
							"var prov_record_date=moment().toISOString()",
							"console.log(\"prov_record_date\", prov_record_date);",
							"pm.environment.set(\"prov_record_date\", prov_record_date)",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Created group should have a uuid (id field)\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.not.empty",
							"    pm.environment.set(\"group_id\",jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Org",
						"value": "52bbad3d-c765-4c58-a900-4559f2f09efa",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-Provenance",
						"value": "{\"resourceType\":\"Provenance\",\"recorded\":\"{{prov_record_date}}\",\"reason\":[{\"coding\":[{\"system\":\"http://hl7.org/fhir/v3/ActReason\",\"code\":\"TREAT\"}]}],\"agent\":[{\"role\":[{\"coding\":[{\"system\":\"http://hl7.org/fhir/v3/RoleClass\",\"code\":\"AGNT\"}]}],\"who\":{\"reference\":\"Organization/{{organization_id}}\"}}]}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resourceType\": \"Group\",\n  \"type\": \"person\",\n  \"actual\": true,\n  \"name\": \"Test Group 3\",\n  \"managingEntity\": {\n    \"reference\": \"Organization/1\",\n    \"display\": \"Healthcare related organization\"\n  },\n  \"member\": [\n    {\n      \"extension\": [\n        {\n          \"url\": \"http://hl7.org/fhir/us/davinci-atr/StructureDefinition/ext-attributedProvider\",\n          \"valueReference\": {\n            \"type\": \"Practitioner\",\n            \"identifier\": {\n                \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n                \"value\": \"9941339108\"\n            }\n          }\n        }\n      ],\n      \"entity\": {\n        \"type\": \"Patient\",\n        \"identifier\": {\n            \"value\": \"3S58A00AA00\",\n            \"system\": \"http://hl7.org/fhir/sid/us-mbi\"\n        }\n      },\n      \"period\": {\n        \"start\": \"2014-10-08\",\n        \"end\": \"2020-10-08\"\n      },\n      \"inactive\": false\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_public_base_url}}/Group",
					"host": [
						"{{api_public_base_url}}"
					],
					"path": [
						"Group"
					]
				}
			},
			"response": []
		},
		{
			"name": "Export Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Header should have Content-Location\", function () {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"    var contentLocation = pm.response.headers.get(\"Content-Location\");",
							"    pm.environment.set(\"job_status_url\", contentLocation);",
							"});",
							"",
							"pm.environment.set(\"job_status_check_count\", 0)",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_public_base_url}}/Group/{{group_id}}/$export",
					"host": [
						"{{api_public_base_url}}"
					],
					"path": [
						"Group",
						"{{group_id}}",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Job Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the status code\", function(){",
							"    if(pm.response.code == 202)",
							"    {",
							"        let checkCount = parseInt(pm.environment.get(\"job_status_check_count\"))",
							"        if (checkCount>25){",
							"            pm.expect.fail(\"Job has not completed after 25 status checks\")",
							"        }",
							"        pm.environment.set(\"job_status_check_count\", checkCount+1)",
							"        console.log(\"Received job status of 202. Sleeping for 10 seconds before next request. Request \"+pm.environment.get(\"job_status_check_count\")+\" of 15\")",
							"        setTimeout(function(){}, 10000);",
							"        postman.setNextRequest(\"Job Status\")",
							"    }",
							"    else{",
							"        pm.response.to.have.status(200);",
							"        postman.setNextRequest(\"Get Coverage Data\")",
							"        var outputArray = pm.response.json()[\"output\"]",
							"        for (i in outputArray){",
							"            let outItem = outputArray[i]",
							"            if (outItem.type == \"Coverage\"){",
							"                pm.environment.set(\"coverage_data_url\", outItem.url)",
							"            }",
							"            else if (outItem.type == \"Patient\"){",
							"                pm.environment.set(\"patient_data_url\", outItem.url)",
							"            }",
							"            else if (outItem.type == \"ExplanationOfBenefit\"){",
							"                pm.environment.set(\"eob_data_url\", outItem.url)",
							"            }",
							"            else {",
							"                pm.expect.fail(\"Recieved invalid output type: \"+outItem.type)",
							"            }",
							"        }  ",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{job_status_url}}",
					"protocol": "http",
					"host": [
						"{{job_status_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ensure resource type is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"resourceType\":\"Coverage\"');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{coverage_data_url}}",
					"host": [
						"{{coverage_data_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ensure resource type is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"resourceType\":\"ExplanationOfBenefit\"');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{eob_data_url}}",
					"host": [
						"{{eob_data_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ensure resource type is correct\", function () {",
							"    pm.expect(pm.response.text()).to.include('\"resourceType\":\"Patient\"');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{patient_data_url}}",
					"host": [
						"{{patient_data_url}}"
					]
				}
			},
			"response": []
		}
	]
}