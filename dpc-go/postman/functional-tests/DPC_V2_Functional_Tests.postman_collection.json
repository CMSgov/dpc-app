{
	"info": {
		"_postman_id": "f0bd98f1-56e5-4310-9879-94ab11e4cb98",
		"name": "DPC V2 Functional Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Organization",
					"item": [
						{
							"name": "API Admin - Successful Org Creation | POST /v2/Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Created organization should have a uuid (id field)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.not.empty",
											"    pm.environment.set(\"organization_id\",jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"value": "org123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\": \"Organization\",\n  \"identifier\": [\n    {\n      \"use\": \"official\",\n      \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n      \"value\": \"0d6094e{{$randomInt}}\"\n    },\n    {\n      \"use\": \"usual\",\n      \"system\": \"urn:oid:2.16.840.1.113883.2.4.6.1\",\n      \"value\": \"17-0112278\"\n    }\n  ],\n  \"type\": [\n    {\n      \"coding\": [\n        {\n          \"system\": \"urn:oid:2.16.840.1.113883.2.4.15.1060\",\n          \"code\": \"V6\",\n          \"display\": \"University Medical Hospital\"\n        },\n        {\n          \"system\": \"http://terminology.hl7.org/CodeSystem/organization-type\",\n          \"code\": \"prov\",\n          \"display\": \"Healthcare Provider\"\n        }\n      ]\n    }\n  ],\n  \"name\": \"Burgers University Medical Center\",\n  \"telecom\": [\n    {\n      \"system\": \"phone\",\n      \"value\": \"022-655 2300\",\n      \"use\": \"work\"\n    }\n  ],\n  \"address\": [\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"Galapagosweg 91\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9105 PZ\",\n      \"country\": \"NLD\"\n    },\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"PO Box 2311\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9100 AA\",\n      \"country\": \"NLD\"\n    }\n  ],\n  \"contact\": [\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PRESS\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2334\"\n        }\n      ]\n    },\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PATINF\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2335\"\n        }\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Create Org With Duplicate NPI | POST /v2/Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Respone contains correct error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.issue[0].details.text).to.be.equal(\"organization with npi already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "org123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\": \"Organization\",\n  \"identifier\": [\n    {\n      \"use\": \"official\",\n      \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n      \"value\": \"0d6094\"\n    },\n    {\n      \"use\": \"usual\",\n      \"system\": \"urn:oid:2.16.840.1.113883.2.4.6.1\",\n      \"value\": \"17-0112278\"\n    }\n  ],\n  \"type\": [\n    {\n      \"coding\": [\n        {\n          \"system\": \"urn:oid:2.16.840.1.113883.2.4.15.1060\",\n          \"code\": \"V6\",\n          \"display\": \"University Medical Hospital\"\n        },\n        {\n          \"system\": \"http://terminology.hl7.org/CodeSystem/organization-type\",\n          \"code\": \"prov\",\n          \"display\": \"Healthcare Provider\"\n        }\n      ]\n    }\n  ],\n  \"name\": \"Burgers University Medical Center\",\n  \"telecom\": [\n    {\n      \"system\": \"phone\",\n      \"value\": \"022-655 2300\",\n      \"use\": \"work\"\n    }\n  ],\n  \"address\": [\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"Galapagosweg 91\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9105 PZ\",\n      \"country\": \"NLD\"\n    },\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"PO Box 2311\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9100 AA\",\n      \"country\": \"NLD\"\n    }\n  ],\n  \"contact\": [\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PRESS\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2334\"\n        }\n      ]\n    },\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PATINF\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2335\"\n        }\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Successful Org Retrieval | GET /v2/Organization/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"ID of organization retrieved should match id in path\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(pm.environment.get(\"organization_id\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"value": "org123",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/{{organization_id}}",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Get Non Existing Org | GET /v2/Organization/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response code in body should be not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.issue[0].code).to.equal(\"Not Found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"value": "org123",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/00000000-5671-473f-b3fe-ed5a0551a2d7",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										"00000000-5671-473f-b3fe-ed5a0551a2d7"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Successful Org Delete | DELETE /v2/Organization/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Org",
										"value": "org123",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/{{organization_id}}",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Get Deleted Org | GET /v2/Organization/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 | Org previously deleted\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"ID of organization retrieved should match id in path\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.issue[0].code).to.equal(\"Not Found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"value": "org123",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/{{organization_id}}",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										"{{organization_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Implementer",
					"item": [
						{
							"name": "API Admin - Successful Impl Creation | POST /v2/Implementer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains a valid implementer resource in response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.not.be.empty",
											"    pm.expect(jsonData.name).to.be.equal(\"Functional Test Implementer\")",
											"    pm.expect(jsonData.ssas_group_id).to.not.be.empty",
											"    pm.expect(jsonData.created_at).to.not.be.empty",
											"    pm.expect(jsonData.updated_at).to.not.be.empty",
											"    pm.expect(jsonData.deleted_at.Valid).to.be.equal(false)",
											"",
											"    //Set enviroment variables. To be used in subsequent tests.",
											"    pm.environment.set(\"implementer_id\", jsonData.id);",
											"    pm.environment.set(\"ssas_group_id\", jsonData.ssas_group_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"value": "jdfadf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Functional Test Implementer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Get Impl's Orgs | GET /v2/Implementer/:id/org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"value": "jdfadf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Functional Test Implementer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/org",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"org"
									]
								},
								"description": "Retrieve the orgs of an implementer that has no organizations, except a 0 sized array."
							},
							"response": []
						},
						{
							"name": "API Admin - Succesfull ImplOrg Creation POST /v2/Implementer/:id/Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains Org Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.org_id).to.not.be.empty",
											"});",
											"",
											"pm.test(\"Contains correct Implementer Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.implementer_id).to.be.equal(pm.environment.get(\"implementer_id\"))",
											"});",
											"",
											"pm.test(\"Contains Active status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.be.equal(\"Active\")",
											"});",
											"",
											"pm.test(\"Contains NPI\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.npi).to.be.equal(pm.environment.get(\"npi\"))",
											";",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"npi\", \"442545\"+Math.floor(Math.random() * 10000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"value": "jdfadf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"npi\":\"{{npi}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/org",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"org"
									]
								},
								"description": "Assign an organization to an implementer using the npi of an organization that is not yet in our system. The org should get created automatically."
							},
							"response": []
						},
						{
							"name": "API Admin - Create ImpleOrg with Existing Org | POST /v2/Implementer/:id/Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"value": "jdfadf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"npi\":\"123458\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/org",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"org"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Get Impl's Orgs | GET /v2/Implementer/:id/org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains exactly 1 Org\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.not.be.null",
											"    pm.expect(jsonData[1]).to.be.null",
											"",
											"});",
											"",
											"pm.test(\"Contains Org Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].org_id).to.not.be.empty",
											"});",
											"",
											"pm.test(\"Contains Org name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].org_name).to.not.be.empty",
											"",
											"});",
											"",
											"pm.test(\"Contains Active statuc\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].status).to.be.equal(\"Active\")",
											"});",
											"",
											"pm.test(\"Contains NPI\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].npi).to.be.equal(\"123456\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "jdfadf"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Functional Test Implementer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/org",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"org"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "System",
					"item": [
						{
							"name": "Setup | Create Implementer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains a valid implementer resource in response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.not.be.empty",
											"    pm.expect(jsonData.name).to.be.equal(\"Functional Test Implementer\")",
											"    pm.expect(jsonData.ssas_group_id).to.not.be.empty",
											"    pm.expect(jsonData.created_at).to.not.be.empty",
											"    pm.expect(jsonData.updated_at).to.not.be.empty",
											"    pm.expect(jsonData.deleted_at.Valid).to.be.equal(false)",
											"",
											"    //Set enviroment variables. To be used in subsequent tests.",
											"    pm.environment.set(\"implementer_id\", jsonData.id);",
											"    pm.environment.set(\"ssas_group_id\", jsonData.ssas_group_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Functional Test Implementer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup | Create ImplOrg Relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains Org Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.org_id).to.not.be.empty",
											"});",
											"",
											"pm.test(\"Contains correct Implementer Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.implementer_id).to.be.equal(pm.environment.get(\"implementer_id\"))",
											"});",
											"",
											"pm.test(\"Contains Active status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.be.equal(\"Active\")",
											"});",
											"",
											"pm.test(\"Contains NPI\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.npi).to.be.equal(pm.environment.get(\"npi\"))",
											";",
											"});",
											"",
											"pm.environment.set(\"organization_id\", pm.response.json().org_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"npi\", \"442545\"+Math.floor(Math.random() * 10000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"value": "jdfadf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"npi\":\"{{npi}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/org",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"org"
									]
								},
								"description": "Assign an organization to an implementer using the npi of an organization that is not yet in our system. The org should get created automatically."
							},
							"response": []
						},
						{
							"name": "Create System | Happy Case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains client_id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_id).to.be.not.empty;",
											"});",
											"",
											"pm.test(\"Response contains correct client_name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_name).to.eql(\"Functional Tests System\");",
											"});",
											"",
											"pm.test(\"Response contains correct IP\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ips[0]).to.eql(\"75.27.241.103\");",
											"});",
											"",
											"pm.test(\"Response conains client_token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_token).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Response contains expires_at\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.expires_at).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "jdfadf"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"Functional Tests System\",\n  \"ips\": [\n    \"75.27.241.103\"\n  ],\n  \"public_key\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAotwYulgKATjpfZFmk0Wo\\nYHOJRh+70hRPwgEUmTdRK2Ni1wyHI3U16DoNpJq72rQhCdcIFqqYKKFgc7P4d6rJ\\nTmnVEPTgNFw6rioQ1589jcZrUPmFM44f/TAvK4GlEl5yhl/3euowUif38vMWEWkf\\nigJbktYgA8KkVMOdSAmX/V0KZqgm7763IXeOkn7Dq+t0AfExoGVgYM39ETALTKuC\\nem7NiP61YRouzZT5fjZ/hRSdU5LKzydVw/feIalJgpS9Sa6qrDo3MwQB471pVB84\\nzeAXeS3bkOknfaN1ykfTH4GMqlwxTu371KEPpQgHLhQCd7d1UiNHMNPItT0jrzid\\nyDUv1BVO9ja0EvKH9TjMhXBb+60kUvgo+MJgsC7DlUcC8LLt5dXQxeMKEWh6eVgT\\nU/+zhVoWzIqWNeuHrOl4lBXs9fciQRRpyoFy3kRa5U+aiVVVao/kwXeKKzSR14s9\\nFvWwlNoPEipHq311Wb/Q+D0/exDRxZuKph/hukV3/U5HCqD2U3bU4ZbJb0Ze0ZiZ\\nQZUCcCIe/NQmL8nA6dFJHnuusKLPsgF+FeEVXv3WNiiDtE/AdARFsjoAM5ZtErwb\\nLrowCWaKfWEhvklkNqw0EexDlexVxC3AagtcJIkIXEEN9PdQwRNc4G6WJbTgQOcL\\nx63djyXb2yX0eGzViiPLaWECAwEAAQ==\\n-----END PUBLIC KEY-----\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/Org/{{organization_id}}/system",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"Org",
										"{{organization_id}}",
										"system"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Successful Retrieval of SSAS System | GET /v2/Implementer/:id/Org/:id/system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains client_id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_id).to.be.not.empty;",
											"});",
											"",
											"pm.test(\"Response contains correct client_name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_name).to.eql(\"Functional Tests System\");",
											"});",
											"",
											"pm.test(\"Response contains correct IP\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ips[0].ip).to.eql(\"75.27.241.103\");",
											"});",
											"",
											"pm.test(\"Response conains client_token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_tokens.length).to.eql(1)",
											"});",
											"",
											"pm.test(\"Response contain public key\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.public_keys.length).to.eq(1)",
											"});",
											"",
											"pm.test(\"Response contains expires_at\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.client_tokens[0].expires_at).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "jdfadf"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/Org/{{organization_id}}/system",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"Org",
										"{{organization_id}}",
										"system"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Create Sys For Non-Existant Org| POST /v2/Implementer/:id/Org/:id/system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains correct mesage\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.issue[0].details.text).to.equal(\"Implementer/Org relation is not active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "jdfadf"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/Org/123456-fake-1234/system",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"Org",
										"123456-fake-1234",
										"system"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Create System With Missing Body | POST /v2/Implementer/:id/Org/:id/system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "jdfadf"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/Org/0fe60651-1634-4d43-9f39-b4d34651f21d/system",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"Org",
										"0fe60651-1634-4d43-9f39-b4d34651f21d",
										"system"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Admin - Create Duplicate System | POST /v2/Implementer/:id/Org/:id/system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.issue[0].details.text).to.equals(\"a system for this implementer/org relation already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "jdfadf"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"Functional Tests System\",\n  \"ips\": [\n    \"75.27.241.103\"\n  ],\n  \"public_key\": \"-----BEGIN PUBLIC KEY-----\\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAotwYulgKATjpfZFmk0Wo\\nYHOJRh+70hRPwgEUmTdRK2Ni1wyHI3U16DoNpJq72rQhCdcIFqqYKKFgc7P4d6rJ\\nTmnVEPTgNFw6rioQ1589jcZrUPmFM44f/TAvK4GlEl5yhl/3euowUif38vMWEWkf\\nigJbktYgA8KkVMOdSAmX/V0KZqgm7763IXeOkn7Dq+t0AfExoGVgYM39ETALTKuC\\nem7NiP61YRouzZT5fjZ/hRSdU5LKzydVw/feIalJgpS9Sa6qrDo3MwQB471pVB84\\nzeAXeS3bkOknfaN1ykfTH4GMqlwxTu371KEPpQgHLhQCd7d1UiNHMNPItT0jrzid\\nyDUv1BVO9ja0EvKH9TjMhXBb+60kUvgo+MJgsC7DlUcC8LLt5dXQxeMKEWh6eVgT\\nU/+zhVoWzIqWNeuHrOl4lBXs9fciQRRpyoFy3kRa5U+aiVVVao/kwXeKKzSR14s9\\nFvWwlNoPEipHq311Wb/Q+D0/exDRxZuKph/hukV3/U5HCqD2U3bU4ZbJb0Ze0ZiZ\\nQZUCcCIe/NQmL8nA6dFJHnuusKLPsgF+FeEVXv3WNiiDtE/AdARFsjoAM5ZtErwb\\nLrowCWaKfWEhvklkNqw0EexDlexVxC3AagtcJIkIXEEN9PdQwRNc4G6WJbTgQOcL\\nx63djyXb2yX0eGzViiPLaWECAwEAAQ==\\n-----END PUBLIC KEY-----\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Implementer/{{implementer_id}}/Org/0fe60651-1634-4d43-9f39-b4d34651f21d/system",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Implementer",
										"{{implementer_id}}",
										"Org",
										"0fe60651-1634-4d43-9f39-b4d34651f21d",
										"system"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Public",
			"item": [
				{
					"name": "Group",
					"item": [
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {",
											"    \"properties\": {",
											"        \"access_token\": { \"type\": \"string\" },",
											"        \"token_type\": { \"type\": \"string\" },",
											"        \"expires_in\": { \"type\": \"string\", \"format\": \"time\" }",
											"    }",
											"};",
											"var Ajv = require('ajv');",
											"var ajv = new Ajv({schemas: [schema]});",
											"",
											"pm.test(\"Response is 'ok'\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"token_type has expected value\", function () {",
											"    pm.response.to.have.jsonBody(\"token_type\", \"bearer\")",
											"});",
											"",
											"pm.test('Schema is valid', function() {",
											"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
											"});",
											"",
											"var respJson = pm.response.json();",
											"pm.environment.set(\"access_token\", respJson.access_token);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib);",
											"eval(postman.getEnvironmentVariable(\"jsrsasign\")); //import jsrsasign lib",
											"pm.environment.unset(\"variable_key\");",
											"var dt = new Date().getTime();",
											"var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
											"    var r = (dt + Math.random() * 16) % 16 | 0;",
											"    dt = Math.floor(dt / 16);",
											"    return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);",
											"}); ",
											"var data = {",
											"    \"iss\": postman.getEnvironmentVariable(\"client_token\"),",
											"    \"sub\": postman.getEnvironmentVariable(\"client_token\"),",
											"    \"aud\": postman.getEnvironmentVariable(\"api_public_base_url\")+\"/Token/auth\",",
											"    \"exp\": Math.round(new Date().getTime() / 1000)+200,",
											"    \"iat\": Math.round(new Date().getTime() / 1000),",
											"    \"jti\": uuid,",
											"};",
											"console.log(data.aud)",
											"var secret = postman.getEnvironmentVariable(\"private_key\");",
											"const header = {",
											"    'alg': 'RS384',",
											"    'kid': postman.getEnvironmentVariable(\"public_key_id\"),",
											"}",
											"var sPayload = JSON.stringify(data);",
											"var sJWT = KJUR.jws.JWS.sign(\"RS384\", header, sPayload, secret);",
											"postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true,
									"accept-encoding": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "system/*.*",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{jwt_token}}",
											"type": "text"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_public_base_url}}/Token/auth",
									"host": [
										"{{api_public_base_url}}"
									],
									"path": [
										"Token",
										"auth"
									]
								},
								"description": "Verify a username and password"
							},
							"response": []
						},
						{
							"name": "Setup | Create Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Created organization should have a uuid (id field)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.not.empty",
											"    pm.environment.set(\"organization_id\",jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\": \"Organization\",\n  \"identifier\": [\n    {\n      \"use\": \"official\",\n      \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n      \"value\": \"0d6094e{{$randomInt}}\"\n    },\n    {\n      \"use\": \"usual\",\n      \"system\": \"urn:oid:2.16.840.1.113883.2.4.6.1\",\n      \"value\": \"17-0112278\"\n    }\n  ],\n  \"type\": [\n    {\n      \"coding\": [\n        {\n          \"system\": \"urn:oid:2.16.840.1.113883.2.4.15.1060\",\n          \"code\": \"V6\",\n          \"display\": \"University Medical Hospital\"\n        },\n        {\n          \"system\": \"http://terminology.hl7.org/CodeSystem/organization-type\",\n          \"code\": \"prov\",\n          \"display\": \"Healthcare Provider\"\n        }\n      ]\n    }\n  ],\n  \"name\": \"Burgers University Medical Center\",\n  \"telecom\": [\n    {\n      \"system\": \"phone\",\n      \"value\": \"022-655 2300\",\n      \"use\": \"work\"\n    }\n  ],\n  \"address\": [\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"Galapagosweg 91\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9105 PZ\",\n      \"country\": \"NLD\"\n    },\n    {\n      \"use\": \"work\",\n      \"line\": [\n        \"PO Box 2311\"\n      ],\n      \"city\": \"Den Burg\",\n      \"postalCode\": \"9100 AA\",\n      \"country\": \"NLD\"\n    }\n  ],\n  \"contact\": [\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PRESS\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2334\"\n        }\n      ]\n    },\n    {\n      \"purpose\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/contactentity-type\",\n            \"code\": \"PATINF\"\n          }\n        ]\n      },\n      \"telecom\": [\n        {\n          \"system\": \"phone\",\n          \"value\": \"022-655 2335\"\n        }\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_admin_port}}/api/v2/Organization/",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_admin_port}}",
									"path": [
										"api",
										"v2",
										"Organization",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Group | Happy Case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Created group should have a uuid (id field)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.not.empty",
											"    pm.environment.set(\"group_id\",jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "{{organization_id}}"
									},
									{
										"key": "Authorization",
										"value": "access_token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\": \"Group\",\n  \"type\": \"person\",\n  \"actual\": true,\n  \"name\": \"Test Group 3\",\n  \"managingEntity\": {\n    \"reference\": \"Organization/1\",\n    \"display\": \"Healthcare related organization\"\n  },\n  \"member\": [\n    {\n      \"extension\": [\n        {\n          \"url\": \"http://hl7.org/fhir/us/davinci-atr/StructureDefinition/ext-attributedProvider\",\n          \"valueReference\": {\n            \"type\": \"Practitioner\",\n            \"identifier\": {\n                \"system\": \"http://hl7.org/fhir/sid/us-npi\",\n                \"value\": \"9941339108\"\n            }\n          }\n        }\n      ],\n      \"entity\": {\n        \"type\": \"Patient\",\n        \"identifier\": {\n            \"value\": \"2SW4N00AA00\",\n            \"system\": \"http://hl7.org/fhir/sid/us-mbi\"\n        }\n      },\n      \"period\": {\n        \"start\": \"2014-10-08\",\n        \"end\": \"2020-10-08\"\n      },\n      \"inactive\": false\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_admin_protocol}}://{{api_admin_host}}:{{api_public_port}}/api/v2/Group/",
									"protocol": "{{api_admin_protocol}}",
									"host": [
										"{{api_admin_host}}"
									],
									"port": "{{api_public_port}}",
									"path": [
										"api",
										"v2",
										"Group",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FHIR Bulk Data",
					"item": [
						{
							"name": "Start export job for Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"var location = postman.getResponseHeader(\"Content-Location\");",
											"",
											"postman.setEnvironmentVariable(\"job-id\", location.substr(location.indexOf(\"Jobs/\")+5));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "{{organization_id}}"
									},
									{
										"key": "Prefer",
										"value": "respond-async",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/fhir+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_public_protocol}}://{{api_public_host}}:{{api_public_port}}/api/v2/Group/{{group_id}}/$export?_outputFormat=application/ndjson",
									"protocol": "{{api_public_protocol}}",
									"host": [
										"{{api_public_host}}"
									],
									"port": "{{api_public_port}}",
									"path": [
										"api",
										"v2",
										"Group",
										"{{group_id}}",
										"$export"
									],
									"query": [
										{
											"key": "_outputFormat",
											"value": "application/ndjson"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Job Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"var dataType = data.output.length > 0 ? data.output[0].type.toLowerCase() : data.error[0].type.toLowerCase();",
											"var url = data.output.length > 0 ? data.output[0].url : data.error[0].url;",
											"",
											"function getFileName() {",
											"    return url.substr(url.indexOf(\"Data/\")+5, url.indexOf(dataType) - url.indexOf(\"Data/\")-6) + \".\" + dataType + \".ndjson\";",
											"}",
											"",
											"pm.environment.set(\"ndjson_file\", getFileName());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"type": "text",
										"value": "{{organization_id}}"
									},
									{
										"key": "Accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_public_protocol}}://{{api_public_host}}:{{api_public_port}}/api/v2/Jobs/{{job-id}}",
									"protocol": "{{api_public_protocol}}",
									"host": [
										"{{api_public_host}}"
									],
									"port": "{{api_public_port}}",
									"path": [
										"api",
										"v2",
										"Jobs",
										"{{job-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Patient Data Export File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Org",
										"value": "{{organization_id}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/fhir+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_public_protocol}}://{{api_public_host}}:{{api_public_port}}/api/v2/Data/{{ndjson_file}}",
									"protocol": "{{api_public_protocol}}",
									"host": [
										"{{api_public_host}}"
									],
									"port": "{{api_public_port}}",
									"path": [
										"api",
										"v2",
										"Data",
										"{{ndjson_file}}"
									]
								},
								"description": "Download patient data details from ndjson file.\n\nRequires that you first have a group that includes a patient, that you start a data export job using `_type=Patient`, and that you run the `Status/URL of Data Export Job` request to save the patient filename. Finally, this request uses that patient filename to retrieve the actual data.\n\nPREREQUESITES:\n- `patient_file`, which comes from `Status/URL of Data Export Job`"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}